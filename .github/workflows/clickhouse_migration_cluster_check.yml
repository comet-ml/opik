name: "ClickHouse Migration Cluster Check"
run-name: "ClickHouse Migration Cluster Check on ${{ github.ref_name }} by @${{ github.actor }}"
permissions:
  contents: read

on:
  pull_request:
    paths:
      - "apps/opik-backend/src/main/resources/liquibase/db-app-analytics/migrations/**/*.sql"
  push:
    branches:
      - "main"
    paths:
      - "apps/opik-backend/src/main/resources/liquibase/db-app-analytics/migrations/**/*.sql"

  workflow_dispatch:

jobs:
  validate-clickhouse-migrations:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1

      - name: Get changed ClickHouse migration files
        id: changed-files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Detecting ClickHouse migration files that were added or modified..."
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, use GitHub's built-in files API
            gh api repos/${{ github.repository }}/pulls/${{ github.event.number }}/files \
              --jq '.[] | select(.status == "added" or .status == "modified") | select(.filename | test("^apps/opik-backend/src/main/resources/liquibase/db-app-analytics/migrations/.*\\.sql$")) | .filename' > changed_files.txt
            CHANGED_FILES=$(cat changed_files.txt || echo "")
            rm -f changed_files.txt
          else
            # For pushes to main, use GitHub API to get commit files
            # This works reliably regardless of fetch-depth
            gh api repos/${{ github.repository }}/commits/${{ github.sha }} \
              --jq '.files[] | select(.status == "added" or .status == "modified") | select(.filename | test("^apps/opik-backend/src/main/resources/liquibase/db-app-analytics/migrations/.*\\.sql$")) | .filename' > changed_files.txt
            CHANGED_FILES=$(cat changed_files.txt || echo "")
            rm -f changed_files.txt
          fi
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "üìÑ Found ClickHouse migration files to validate:"
            printf '%s\n' $CHANGED_FILES | while read -r file; do
              [ -n "$file" ] && echo "   - $file"
            done
            
            # Save the files to environment variable for next step
            echo "MIGRATION_FILES<<EOF" >> $GITHUB_ENV
            printf '%s\n' $CHANGED_FILES | while read -r file; do
              [ -n "$file" ] && echo "$file" >> $GITHUB_ENV
            done
            echo "EOF" >> $GITHUB_ENV
            echo "HAS_MIGRATION_FILES=true" >> $GITHUB_ENV
          else
            echo "üìã No ClickHouse migration files were added or modified."
            echo "‚úÖ No validation needed."
            echo "HAS_MIGRATION_FILES=false" >> $GITHUB_ENV
          fi

      - name: Validate ClickHouse migrations have ON CLUSTER clause
        if: env.HAS_MIGRATION_FILES == 'true'
        run: |
          echo "üîç Validating ClickHouse migrations for proper ON CLUSTER clause usage..."
          echo "üìñ Reference: https://clickhouse.com/docs/sql-reference/distributed-ddl"
          echo
          
          # Convert the multiline environment variable to an array
          mapfile -t FILES <<< "$MIGRATION_FILES"
          
          # Run the validation script with specific files
          if ./scripts/check_clickhouse_migrations_cluster.sh "${FILES[@]}"; then
            echo "‚úÖ All modified ClickHouse migrations are properly configured!"
            echo "üéâ DDL operations will be executed distributively across the cluster."
          else
            echo "‚ùå ClickHouse migration validation failed!"
            echo
            echo "üí° What this means:"
            echo "   - DDL operations without ON CLUSTER clause will only execute on a single node"
            echo "   - This can cause inconsistencies in distributed ClickHouse deployments"
            echo "   - All CREATE, DROP, ALTER, and RENAME statements must include ON CLUSTER '{cluster}'"
            echo
            echo "üîß How to fix:"
            echo "   1. Add 'ON CLUSTER '\"'\"'{cluster}'\"'\"'' to all DDL statements in your migration files"
            echo "   2. Example: CREATE TABLE my_table ON CLUSTER '{cluster}' (...)"
            echo "   3. Reference: https://clickhouse.com/docs/sql-reference/distributed-ddl"
            echo
            exit 1
          fi

      - name: Summary for no migration files
        if: env.HAS_MIGRATION_FILES == 'false'
        run: |
          echo "=========================================="
          echo "‚úÖ No ClickHouse Migration Files Changed"
          echo "=========================================="
          echo "üìã No ClickHouse migration files were added or modified in this change."
          echo "‚úÖ No validation required."
          echo
          echo "üí° Note: This check only validates NEW or MODIFIED migration files."
          echo "   Existing migration files are not checked as they cannot be changed."

      - name: Summary for validated files
        if: env.HAS_MIGRATION_FILES == 'true' && success()
        run: |
          echo "=========================================="
          echo "‚úÖ ClickHouse Migration Validation PASSED"
          echo "=========================================="
          echo "‚úÖ All modified DDL operations include proper ON CLUSTER clause"
          echo "‚úÖ Migrations are ready for distributed ClickHouse deployment"
          echo "‚úÖ No cluster inconsistencies will occur"
          echo
          echo "üéØ This check ensures that:"
          echo "   ‚Ä¢ CREATE statements will create tables/indexes on all cluster nodes"
          echo "   ‚Ä¢ DROP statements will remove objects from all cluster nodes"
          echo "   ‚Ä¢ ALTER statements will modify schema on all cluster nodes"
          echo "   ‚Ä¢ RENAME statements will rename objects on all cluster nodes"
          echo
          echo "üìö For more information about distributed DDL:"
          echo "   https://clickhouse.com/docs/sql-reference/distributed-ddl"
