---
description:
globs:
alwaysApply: true
---
# Opik Project Structure

This document outlines the complete directory structure and important files in the Opik project.

## Root Directory Structure

```
opik/
├── .cursor/                    # Cursor IDE configuration and rules
├── .github/                    # GitHub workflows and templates
├── .hooks/                     # Git hooks
├── apps/                       # Main applications
├── deployment/                 # Deployment configurations
├── scripts/                    # Utility scripts
├── sdks/                       # Software Development Kits
├── tests_end_to_end/          # End-to-end tests
├── tests_load/                # Load testing
├── .gitattributes             # Git attributes
├── .gitignore                 # Git ignore rules
├── .java-version              # Java version specification
├── CHANGELOG.md               # Project changelog
├── CLA.md                     # Contributor License Agreement
├── CONTRIBUTING.md            # Contribution guidelines
├── LICENSE                    # Project license
├── README.md                  # Main project readme
├── hooks-install.sh           # Install git hooks
├── hooks-remove.sh            # Remove git hooks
├── opik.ps1                   # PowerShell script
├── opik.sh                    # Shell script
├── readme-thumbnail-new.png   # Project thumbnail
├── readme_CN.md              # Chinese readme
├── readme_JP.md              # Japanese readme
├── readme_KO.md              # Korean readme
└── version.txt               # Version information
```

## Applications (`apps/`)

### Core Applications

```
apps/
├── opik-backend/              # Main Java backend application
├── opik-documentation/        # Documentation site
├── opik-frontend/             # React/TypeScript frontend
├── opik-guardrails-backend/   # Guardrails backend
├── opik-python-backend/       # Python backend service
└── opik-sandbox-executor-python/ # Python sandbox executor
```

### Backend Application (`apps/opik-backend/`)

```
opik-backend/
├── src/
│   ├── main/
│   │   ├── java/             # Java source code
│   │   └── resources/        # Configuration files
│   └── test/                 # Test files
├── Dockerfile                # Container definition
├── config.yml                # Application configuration
├── entrypoint.sh             # Container entrypoint
├── pom.xml                   # Maven configuration
└── spotless.xml              # Code formatting rules
```

### Frontend Application (`apps/opik-frontend/`)

```
opik-frontend/
├── e2e/                      # End-to-end tests
├── public/                   # Static assets
├── src/                      # Source code
├── Dockerfile                # Container definition
├── package.json              # Node.js dependencies
├── tailwind.config.ts        # Tailwind CSS configuration
├── tsconfig.json             # TypeScript configuration
└── vite.config.ts            # Vite build configuration
```

## SDKs (`sdks/`)

### Python SDK (`sdks/python/`)

```
python/
├── examples/                 # Usage examples
├── src/opik/                 # Python package source
├── tests/                    # Test suite
├── README.md                 # SDK documentation
├── pyproject.toml            # Project configuration
└── setup.py                  # Package setup
```

### TypeScript SDK (`sdks/typescript/`)

```
typescript/
├── examples/                 # Usage examples
├── src/opik/                 # TypeScript package source
├── tests/                    # Test suite
├── README.md                 # SDK documentation
├── package.json              # Node.js dependencies
└── tsconfig.json             # TypeScript configuration
```

### Optimizer SDK (`sdks/opik_optimizer/`)

```
opik_optimizer/
├── benchmarks/               # Performance benchmarks
├── notebooks/                # Jupyter notebooks
├── scripts/                  # Utility scripts
├── src/opik_optimizer/       # Optimizer package source
├── tests/                    # Test suite
└── pyproject.toml            # Project configuration
```

### Code Generation (`sdks/code_generation/`)

```
code_generation/
├── fern/                     # Fern code generation
│   ├── fern.config.json      # Fern configuration
│   ├── generators.yml        # Generator settings
│   └── openapi/              # OpenAPI specifications
└── README.md                 # Documentation
```

## Deployment (`deployment/`)

```
deployment/
├── docker-compose/           # Docker Compose configurations
│   ├── clickhouse_config/    # ClickHouse configuration
│   ├── docker-compose.override.yaml # Override configuration
│   └── docker-compose.yaml   # Main compose file
└── helm_chart/               # Kubernetes Helm charts
    └── opik/                 # Opik Helm chart
```

## Testing (`tests_*/`)

### End-to-End Tests (`tests_end_to_end/`)

```
tests_end_to_end/
├── installer_utils/          # Installation utilities
├── page_objects/             # Page object models
├── test_files/               # Test data and files
├── tests/                    # Test files
├── models_config.yaml        # Model configuration
├── pyproject.toml            # Python project configuration
└── pytest.ini               # Pytest configuration
```

### Load Tests (`tests_load/`)

```
tests_load/
├── tests/                    # Load test files
├── README.md                 # Load testing documentation
└── requirements.txt          # Python dependencies
```

## GitHub Configuration (`.github/`)

```
.github/
├── ISSUE_TEMPLATE/           # Issue templates
├── actions/                  # Custom GitHub Actions
├── workflows/                # GitHub Actions workflows
├── CODEOWNERS               # Code ownership rules
├── copilot-instructions.md  # GitHub Copilot instructions
├── dependabot.yml           # Dependency updates
├── pull_request_template.md # PR template
└── release-drafter.yml      # Release automation
```

## Scripts (`scripts/`)

```
scripts/
├── README.md                 # Scripts documentation
├── generate_openapi.sh       # OpenAPI generation script
└── start_openapi_server.sh   # OpenAPI server startup
```

## Important Configuration Files

### Root Level
- `README.md` - Main project documentation
- `CONTRIBUTING.md` - Contribution guidelines
- `LICENSE` - Project license
- `.gitignore` - Git ignore patterns
- `opik.sh` / `opik.ps1` - Main project scripts

### Backend
- `apps/opik-backend/pom.xml` - Maven dependencies and build
- `apps/opik-backend/config.yml` - Application configuration
- `apps/opik-backend/spotless.xml` - Code formatting rules

### Frontend
- `apps/opik-frontend/package.json` - Node.js dependencies
- `apps/opik-frontend/tsconfig.json` - TypeScript configuration
- `apps/opik-frontend/vite.config.ts` - Build configuration
- `apps/opik-frontend/tailwind.config.ts` - CSS framework configuration

### Python SDK
- `sdks/python/setup.py` - Package setup and dependencies
- `sdks/python/pyproject.toml` - Modern Python project configuration
- `sdks/python/.ruff.toml` - Python linting configuration

### TypeScript SDK
- `sdks/typescript/package.json` - Node.js dependencies
- `sdks/typescript/tsconfig.json` - TypeScript configuration
- `sdks/typescript/tsup.config.ts` - Build configuration

## Development Workflow

1. **Backend Development**: Work in `apps/opik-backend/src/main/java/`
2. **Frontend Development**: Work in `apps/opik-frontend/src/`
3. **SDK Development**: Work in respective `sdks/` directories
4. **Testing**: Add tests in corresponding `tests/` directories
5. **Documentation**: Update README files and documentation in `apps/opik-documentation/`

## Key Technologies

- **Backend**: Java 21, Dropwizard, JDBI3, MySQL, ClickHouse
- **Frontend**: React, TypeScript, Vite, Tailwind CSS
- **Python SDK**: Python 3.8+, modern packaging with pyproject.toml
- **TypeScript SDK**: Node.js, TypeScript, modern ES modules
- **Testing**: JUnit 5, Pytest, Playwright, Testcontainers
- **Deployment**: Docker, Docker Compose, Kubernetes, Helm
- **CI/CD**: GitHub Actions, automated testing and deployment
