# Local Development Workflow

## Overview

The **recommended approach** uses `scripts/dev-runner.sh`, which runs backend and frontend as local processes for faster development cycles and easier debugging.

**Two modes available:**

1. **Standard Mode** (Recommended): Both backend and frontend as local processes
2. **BE-Only Mode**: Backend as process, frontend in Docker (faster backend rebuilds)

## Quick Start

### **First Time Setup**

```bash
./scripts/dev-runner.sh --restart
# Builds everything and starts all services
```

### **Daily Commands**

```bash
./scripts/dev-runner.sh           # Default: full rebuild and restart
./scripts/dev-runner.sh --start   # Start without rebuilding (faster)
./scripts/dev-runner.sh --stop    # Stop all services
./scripts/dev-runner.sh --verify  # Check status
./scripts/dev-runner.sh --logs    # View recent logs
./scripts/dev-runner.sh --debug   # Enable debug logging (combine with other flags)
```

### **Backend-Only Mode**

```bash
./scripts/dev-runner.sh --be-only-restart  # Backend process + Docker frontend
./scripts/dev-runner.sh --be-only-start    # Start without rebuilding
./scripts/dev-runner.sh --be-only-stop     # Stop BE-only services
```

### **Build & Lint**

```bash
./scripts/dev-runner.sh --build-be   # Build backend
./scripts/dev-runner.sh --build-fe   # Build frontend
./scripts/dev-runner.sh --migrate    # Run database migrations
./scripts/dev-runner.sh --lint-be    # Lint backend (Spotless)
./scripts/dev-runner.sh --lint-fe    # Lint frontend (ESLint)
```

## Access URLs

**Standard Mode:** Frontend `http://localhost:5174`, Backend `http://localhost:8080`  
**BE-Only Mode:** Frontend `http://localhost:5173`, Backend `http://localhost:8080`  
**Health Check:** `http://localhost:8080/is-alive/ping`

**Logs:**

- Backend: `tail -f /tmp/opik-backend.log`
- Frontend: `tail -f /tmp/opik-frontend.log` (or `docker logs -f opik-frontend-1` for BE-only)

**SDK Configuration:**

```bash
export OPIK_URL_OVERRIDE='http://localhost:8080'
export OPIK_WORKSPACE='default'
```

## Development Workflows

### **Backend-Focused (BE-Only Mode)**

```bash
./scripts/dev-runner.sh --be-only-restart  # Initial start
# Make backend changes, then:
./scripts/dev-runner.sh --build-be         # Quick rebuild
tail -f /tmp/opik-backend.log              # Monitor
```

**Benefits:** Faster rebuilds, easy debugging, Docker frontend

### **Frontend-Focused (Standard Mode)**

```bash
./scripts/dev-runner.sh --restart          # Initial start
# Make frontend changes - auto-reloads with HMR
tail -f /tmp/opik-frontend.log             # Monitor if needed
```

**Benefits:** Instant hot reload, browser debugging, React DevTools

### **Full Stack (Standard Mode)**

```bash
./scripts/dev-runner.sh --restart          # Initial start
# Make changes to both, then:
./scripts/dev-runner.sh --restart          # Rebuild both
tail -f /tmp/opik-*.log                    # Monitor both
```

**Benefits:** Fast iteration, full visibility, end-to-end debugging

## Alternative: Docker Mode

Use `opik.sh` for production-like testing:

```bash
./opik.sh --build   # Full stack
./opik.sh --infra   # Infrastructure only
./opik.sh --verify  # Health check
./opik.sh --stop    # Stop all
```

**When to use Docker:** Production testing, container orchestration, guardrails backend  
**When to use dev-runner:** Daily development, debugging, fast iteration

## Configuration

**Auto-configured by dev-runner.sh:**

- Backend CORS enabled
- Frontend API URL set
- PID files in `/tmp/opik-*.pid`
- Logs in `/tmp/opik-*.log`

**Debug mode:**

```bash
./scripts/dev-runner.sh --restart --debug
```

**SDK config (`~/.opik.config`):**

```ini
[opik]
url_override = http://localhost:8080
workspace = default
```

## Troubleshooting

### **Service Won't Start**

```bash
./scripts/dev-runner.sh --verify           # Check status
tail -50 /tmp/opik-backend.log            # View backend logs
tail -50 /tmp/opik-frontend.log           # View frontend logs
lsof -i :8080                             # Check port conflicts
```

**Fix:** `./scripts/dev-runner.sh --stop && ./scripts/dev-runner.sh --restart`

### **Build Failures**

```bash
# Backend
cd apps/opik-backend && mvn clean install -DskipTests

# Frontend
cd apps/opik-frontend && rm -rf node_modules && npm install
```

### **Database Issues**

```bash
tail -100 /tmp/opik-backend.log           # Check migration errors
./scripts/dev-runner.sh --stop
docker volume prune -a -f                 # ⚠️ Removes all data
./scripts/dev-runner.sh --restart
```

### **Stale Processes**

```bash
./scripts/dev-runner.sh --stop
ps aux | grep -E '(opik-backend|npm.*opik-frontend)'
kill -9 <PID>                             # If needed
rm -f /tmp/opik-*.pid
./scripts/dev-runner.sh --start
```

### **Quick Recovery**

```bash
# Soft reset
./scripts/dev-runner.sh --stop && ./scripts/dev-runner.sh --restart

# Nuclear option (removes all data)
./scripts/dev-runner.sh --stop
docker volume prune -a -f
./scripts/dev-runner.sh --restart
```

## Cursor Integration

### **Terminal Setup**

Use split panes:

```bash
# Pane 1: dev-runner.sh operations
# Pane 2: tail -f /tmp/opik-backend.log
# Pane 3: tail -f /tmp/opik-frontend.log
```

### **Tasks Configuration**

Create `.vscode/tasks.json`:

```json
{
  "version": "2.0.0",
  "tasks": [
    {"label": "Opik: Restart", "type": "shell", "command": "./scripts/dev-runner.sh --restart --debug"},
    {"label": "Opik: BE-Only", "type": "shell", "command": "./scripts/dev-runner.sh --be-only-restart"},
    {"label": "Opik: Start", "type": "shell", "command": "./scripts/dev-runner.sh --start"},
    {"label": "Opik: Stop", "type": "shell", "command": "./scripts/dev-runner.sh --stop"},
    {"label": "Build Backend", "type": "shell", "command": "./scripts/dev-runner.sh --build-be"},
    {"label": "Build Frontend", "type": "shell", "command": "./scripts/dev-runner.sh --build-fe"}
  ]
}
```

Access: `Cmd/Ctrl + Shift + P` → "Tasks: Run Task"

### **Debugging**

**Backend (Java):**

`.vscode/launch.json`:

```json
{
  "version": "0.2.0",
  "configurations": [{
    "type": "java",
    "name": "Attach to Backend",
    "request": "attach",
    "hostName": "localhost",
    "port": 5005
  }]
}
```

**Frontend:** Use Chrome DevTools (F12) at `http://localhost:5174`

### **Shell Aliases**

```bash
# Add to ~/.bashrc or ~/.zshrc
alias opik-start='./scripts/dev-runner.sh --start'
alias opik-restart='./scripts/dev-runner.sh --restart --debug'
alias opik-stop='./scripts/dev-runner.sh --stop'
alias opik-logs='tail -f /tmp/opik-*.log'
```

### **Pre-Commit**

```bash
./scripts/dev-runner.sh --lint-be  # Lint backend
./scripts/dev-runner.sh --lint-fe  # Lint frontend
./scripts/dev-runner.sh --verify   # Verify status
```

## Performance Tips

1. Use `--start` (no rebuild) when code unchanged
2. Use BE-only mode for backend work
3. Frontend has instant HMR with Vite
4. Increase Docker resources: 4-6 CPUs, 8-12GB RAM

## Summary

### **Quick Reference**

| Task | Command |
|------|---------|
| **First time setup** | `./scripts/dev-runner.sh --restart` |
| **Daily start** | `./scripts/dev-runner.sh --start` |
| **Full restart** | `./scripts/dev-runner.sh --restart` |
| **Backend only** | `./scripts/dev-runner.sh --be-only-restart` |
| **Stop everything** | `./scripts/dev-runner.sh --stop` |
| **Check status** | `./scripts/dev-runner.sh --verify` |
| **View logs** | `./scripts/dev-runner.sh --logs` |
| **Debug mode** | Add `--debug` to any command |

### **Key Advantages of dev-runner.sh**

✅ **Faster iteration**: Local processes start quicker than containers  
✅ **Better debugging**: Easy to attach debuggers to local processes  
✅ **Simpler logs**: Process logs in `/tmp/opik-*.log`  
✅ **Hot reload**: Frontend benefits from Vite HMR  
✅ **Flexible**: Choose between standard and BE-only modes  
✅ **Automated**: Handles infrastructure, migrations, builds  
✅ **IDE-friendly**: Works seamlessly with Cursor/VS Code debugging

This workflow ensures that any engineer can quickly spin up the entire Opik application stack within Cursor for a seamless development experience, with the flexibility to choose between local processes (recommended) or full Docker deployment based on their specific needs.
