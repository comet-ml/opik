# Feature Documentation & Release Notes Workflow

## Overview

This workflow automates documentation and release notes generation per feature, ensuring that each feature gets documented at development time rather than as an afterthought. The goal is to leverage Cursor's context awareness to prompt generation of comprehensive documentation.

## Key Files and Templates

- [CHANGELOG.md](mdc:CHANGELOG.md) - Main changelog for breaking and critical changes
- [.github/release-drafter.yml](mdc:.github/release-drafter.yml) - Release notes template
- [.github/workflows/release-drafter.yml](mdc:.github/workflows/release-drafter.yml) - Automated release drafting workflow

## Documentation Categories

### **1. User-Facing Changes**
- New features and functionality
- UI/UX improvements
- API changes and additions
- New user facing SDK methods
- New integrations
- Performance improvements
- Bug fixes affecting user experience

### **2. Developer-Facing Changes**
- Internal SDK methods and classes additions/modifications
- Internal API endpoint additions/modifications
- Configuration changes
- Breaking changes

### **3. Internal Changes**
- Infrastructure updates
- Database migrations
- Security improvements
- Performance optimizations
- Code refactoring

## Feature Documentation Templates

### **Feature Documentation Template**

```markdown
# Feature: [FEATURE_NAME]

## Overview
Brief description of the feature and its purpose.

## User Impact
- How does this affect end users?
- What new capabilities does it provide?
- Any UI/UX changes?

## Technical Implementation
- Key components modified/added
- Database changes (if any)
- API changes (if any)
- Configuration requirements

## Breaking Changes
- List any breaking changes
- Migration steps required
- Backward compatibility notes

## Testing
- Test scenarios covered
- Manual testing steps
- Automated test coverage

## Documentation Updates
- [ ] User documentation updated
- [ ] API documentation updated
- [ ] SDK documentation updated
- [ ] Migration guide (if needed)
```

## Release Notes Entry
```markdown
### [FEATURE_TYPE] - [FEATURE_NAME]
- [Brief description of the feature]
- [Any important notes for users]

## Related Issues
- Resolves #[ISSUE_NUMBER]
- Related to #[ISSUE_NUMBER]
```

### **Release Notes Template**

```markdown
## Release [VERSION] - [DATE]

### üöÄ New Features
- **[FEATURE_NAME]**: [Description of new feature]
  - [Additional details if needed]
  - [Usage examples if relevant]

### üîß Improvements
- **[IMPROVEMENT_NAME]**: [Description of improvement]
  - [Performance impact if significant]
  - [User benefit]

### üêõ Bug Fixes
- **[FIX_NAME]**: [Description of bug fix]
  - [Issue number if applicable]
  - [Impact on users]

### ‚ö†Ô∏è Breaking Changes
- **[CHANGE_NAME]**: [Description of breaking change]
  - [Migration steps required]
  - [Reason for change]

### üîí Security Updates
- **[SECURITY_UPDATE]**: [Description of security improvement]
  - [Risk level if applicable]
  - [Action required from users]

### üìö Documentation
- **[DOC_UPDATE]**: [Description of documentation changes]
  - [Links to new/updated docs]

### üîß Internal Changes
- **[INTERNAL_CHANGE]**: [Description of internal improvement]
  - [Impact on development/deployment]
```

## Development Workflow Integration

### **1. PR Review Phase**

During code review:

1. **Documentation Review Checklist:**
   - [ ] Feature documentation is complete and accurate
   - [ ] Release notes entry follows template
   - [ ] Breaking changes are clearly documented
   - [ ] Migration steps are provided (if needed)
   - [ ] API documentation is updated
   - [ ] SDK documentation is updated

2. **Automated Checks:**
   - Documentation completeness check
   - Release notes format validation
   - Breaking changes detection

### **2. Release Preparation**

Before release:

1. **Update CHANGELOG.md:**
   ```markdown
   ### Release [VERSION], [DATE]
   
   #### [CHANGE_TYPE]
   - [Description of change]
   - [Impact on users/deployments]
   ```

2. **Generate release notes:**
   - Use release-drafter to auto-generate from PRs
   - Review and edit for clarity
   - Add manual entries for complex changes

## Cursor Integration

### **1. Context-Aware Documentation Prompts**

Use Cursor's context awareness to generate documentation:

```bash
# Generate feature documentation from code changes
/cursor Generate feature documentation for the changes in this PR

# Generate release notes from commit messages
/cursor Create release notes entry for this feature

# Generate migration guide for breaking changes
/cursor Create migration guide for the database schema changes
```

### **2. Automated Documentation Checks**

Configure Cursor to check for:

- Missing documentation for new features
- Incomplete release notes entries
- Undocumented breaking changes
- Missing migration guides

### **3. Template Integration**

## Release Notes Entry
```markdown
### [FEATURE_TYPE] - [FEATURE_NAME]
[Brief description for release notes]

## Breaking Changes
[Document any breaking changes and migration steps]

## Migration Guide
[If breaking changes exist, provide step-by-step migration guide]
```

## Automation Workflows

### **1. Release Notes Generation**

```yaml
# .github/workflows/release-notes.yml
```

## Best Practices

### **1. Documentation Standards**

- **Be specific**: Include version numbers, dates, and impact details
- **Use consistent formatting**: Follow established templates
- **Include examples**: Provide usage examples for new features
- **Link related content**: Reference related documentation and issues
- **Update incrementally**: Document changes as they're made

### **2. Release Notes Guidelines**

- **User-focused**: Write from the user's perspective
- **Clear and concise**: Use simple, direct language
- **Categorized**: Group changes by type (features, fixes, breaking changes)
- **Actionable**: Include any required user actions
- **Complete**: Cover all significant changes

### **3. Breaking Changes Documentation**

- **Clear impact**: Explain what breaks and why
- **Migration steps**: Provide step-by-step migration guide
- **Timeline**: Give users time to migrate
- **Support**: Offer help for migration issues
- **Rollback**: Provide rollback instructions if possible

## Quality Assurance

### **1. Documentation Review Process**

1. **Automated checks** run on every PR
2. **Manual review** by product team
3. **User testing** of documentation accuracy
4. **Feedback collection** from users

### **2. Continuous Improvement**

- **Regular audits** of documentation quality
- **User feedback** integration
- **Template updates** based on usage
- **Process refinement** based on team feedback

This workflow ensures that documentation is created at development time, not as an afterthought, and that release notes are comprehensive and user-friendly.
