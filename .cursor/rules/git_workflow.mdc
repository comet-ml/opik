---
description: Opik Git workflow for feature development and collaboration
globs: "**/*"
alwaysApply: true
---
# Opik Git Workflow

## **Branch Strategy**

### **Main Branch Protection**
- **main** branch contains production-ready code
- All feature development happens on task-specific branches
- Direct commits to main are prohibited
- All changes merge via Pull Requests

### **Task Branch Naming**
- Ensure git branch naming convention: `{USERNAME}/{TICKET-NUMBER}-{TICKET-SUMMARY}`
- `USERNAME` must be your Git username
- `TICKET-NUMBER`: Jira ticket number (e.g. `OPIK-1763`) or GitHub issue number (e.g. `issue-1234`) or use `NA` if no ticket
- `TICKET-SUMMARY`: short, concise, hyphen-separated description of the branch changes

Examples:

```bash
# ✅ DO: Use consistent task branch naming
andrescrz/OPIK-2180-add-cursor-git-workflow-rule  # For Jira task
someuser/issue-1234-some-task  # For GitHub issue task
someotheruser/NA-some-other-task  # For task with no ticket

# ❌ DON'T: Use inconsistent naming
feature/user-auth
fix-database-issue
random-branch-name
```

## **Complete Task Development Workflow**

### **Task Preparation**

```bash
# 1. Ensure you're on main branch and pull latest
git checkout main
git pull origin main

# 2. Check current branch status
git branch  # Verify you're on main

# 3. Create task-specific branch
git checkout -b username/OPIK-1234-some-task
```

### **Task Implementation**

```bash
# 4. Implement the task
# Write code, tests, documentation

# 5. Stage and commit your changes
git add .
git commit -m "[OPIK-1234] Add project custom metrics UI dashboard"

# 6. Push your branch to remote
git push origin username/OPIK-1234-some-task
```

### **Task Completion**
```bash
# 7. When the task is complete, run final testing
# Create more test files if needed, ensure all tests pass
# or manual testing only for stuff where impossible to write a test

# 8. If tests were added/modified, commit them
git add .
git commit -m "Revision 2: Add comprehensive tests for the project metrics endpoint"

# 9. Push the task branch
git push origin username/OPIK-1234-some-task

# 10. Create Pull Request
# Title: "[OPIK-1234]: Add project custom metrics UI dashboard"
# Description should follow the PR template.
```

### **PR Merge & Cleanup**
```bash
# 11. Human reviews and merges PR into main

# 12. Switch back to main and pull merged changes
git checkout main
git pull origin main

# 13. Delete the feature branch (optional cleanup)
git branch -d username/OPIK-1234-some-task
```

## **Commit Message Standards**

### **Initial Task Commits**
```bash
# ✅ DO: Use ticket number in commit messages
git commit -m "[OPIK-1234] Add project custom metrics UI dashboard"

# ❌ DON'T: Vague or inconsistent commits
git commit -m "fixed stuff"
git commit -m "working on task"
```

### **Revision Commits**
```bash
# ✅ DO: Consistent revision format
git commit -m "Revision 2: Add comprehensive tests for the project metrics endpoint"
git commit -m "Revision 3: Add get metrics endpoint"

# ❌ DON'T: Inconsistent revision numbering
git commit -m "revision: add tests"
git commit -m "v2: add tests"
```

### **Test Commits**
```bash
# ✅ DO: When adding more tests or fixing them
git commit -m "Revision 4: Add comprehensive tests for get metrics endpoint"
git commit -m "Revision 5: Fix failing test cases"
```

## **Branch Management Rules**

### **Branch Protection**
```bash
# ✅ DO: Always work on task branches
git checkout -b username/OPIK-1234-some-task
# Make changes
git commit -m "..."
git push origin username/OPIK-1234-some-task

# ❌ DON'T: Commit directly to main
git checkout main
git commit -m "..."  # NEVER do this
```

### **Keeping Branches Updated**
```bash
# ✅ DO: Regularly sync with main (for long-running tasks)
git checkout username/OPIK-1234-some-task
git fetch origin
git rebase origin/main  # rebase always preferred over merge

# Resolve any conflicts and continue
git add .
git rebase --continue
```

## **Pull Request Guidelines**

### **PR Title Format**
```
[{TICKET-NUMBER}] {TASK-SUMMARY}

Examples:
[OPIK-1234] Add create trace endpoint
[issue-4567] Fix missing cost bug in get span endpoint
[NA] Fix null pointer exception in get trace endpoint hotfix
```

### **PR Description Template**
Always follow the template from [pull_request_template.md](/.github/pull_request_template.md) for the PR description template.
```markdown
## Details
What the change does, why it was made, and any design decisions

## Issues
URL of the Jira ticket (e.g: `https://your-org.atlassian.net/browse/OPIK-1234`) 
or the GitHub issue this PR fixes (e.g. `https://github.com/org/repo/issues/123`), 
or `NA` if no ticket, such as hotfixes

## Testing
Scenarios covered by tests and steps to reproduce

## Documentation
List of docs updated 
or summary of new configuration introduced 
or links to the web documentation reference relevant to this PR
```

## **Conflict Resolution**

### **Code Conflicts**
```bash
# Standard Git conflict resolution
git fetch origin
git rebase origin/main
# Resolve conflicts in files
git add .
git rebase --continue
```

### **Merge Conflicts During Rebase**
```bash
# If conflicts occur during rebase:
# 1. Resolve conflicts in your editor
# 2. Stage resolved files
git add .
# 3. Continue rebase
git rebase --continue
# 4. If more conflicts, repeat steps 1-3
# 5. Force push if needed (only on your feature branch)
git push --force-with-lease origin username/OPIK-1234-some-task
```

## **Emergency Procedures**

### **Hotfixes**
```bash
# For urgent production fixes:
git checkout main
git pull origin main
git checkout -b username/NA-some-hotfix-urgent-issue

# Make minimal fix
git commit -m "[NA]: Fix some critical production issue"

git push origin username/NA-some-hotfix-urgent-issue
# Create emergency PR for immediate review
```

### **Reverting Changes**
```bash
# If you need to revert a commit:
git revert <commit-hash>
git push origin username/OPIK-1234-some-task
```

## **Task Abandonment**
```bash
# Clean up branch
git checkout main
git branch -D username/OPIK-1234-some-task
```

## **Best Practices**

### **Before Starting Work**
- Always pull latest changes from main
- Ensure you're on the correct branch
- Verify your local environment is working

### **During Development**
- Commit frequently with meaningful messages
- Keep commits focused and atomic
- Test your changes before committing
- Push your branch regularly to backup your work

### **Before Creating PR**
- Run all tests locally
- Ensure code follows project standards
- Update documentation if needed
- Review your own changes

### **After PR Merge**
- Clean up local branches
- Update your local main branch
- Verify the merged changes work as expected
