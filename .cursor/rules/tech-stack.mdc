---
description:
globs:
alwaysApply: true
---
# Opik Technology Stack & Dependencies

This document outlines the complete technology stack, dependency versions, and best practices for dependency management across all Opik applications.

## Core Technology Stack

### Backend (Java)
- **Language**: Java 21
- **Framework**: Dropwizard 4.0.14 (REST API)
- **Dependency Injection**: Dropwizard-Guicey 7.2.1
- **Database Access**: JDBI3 with TransactionTemplate
- **Databases**: 
  - MySQL 9.3.0 (Connector/J)
  - ClickHouse 0.9.0 (Java Driver)
- **Migrations**: Liquibase with ClickHouse support (0.7.2)
- **Caching**: Redisson 3.50.0 (Redis)
- **Observability**: OpenTelemetry 2.18.0
- **Build Tool**: Maven with Spotless 2.46.0

### Frontend (TypeScript/React)
- **Language**: TypeScript 5.4.5
- **Framework**: React 18.3.1
- **Build Tool**: Vite 5.2.11
- **Styling**: Tailwind CSS 3.4.3
- **State Management**: Zustand 4.5.2
- **Routing**: TanStack Router 1.36.3
- **Data Fetching**: TanStack Query 5.45.0
- **UI Components**: Radix UI
- **Testing**: Vitest 3.0.5, Playwright 1.45.3

### Python SDK
- **Language**: Python 3.8+
- **Package Manager**: setuptools with pyproject.toml
- **HTTP Client**: httpx
- **Validation**: Pydantic 2.x
- **Testing**: pytest
- **CLI**: Click
- **Logging**: Rich, Sentry SDK

### TypeScript SDK
- **Language**: TypeScript 5.7.2
- **Runtime**: Node.js 18+
- **Build Tool**: tsup 8.3.6
- **HTTP Client**: node-fetch 3.3.2
- **Validation**: Zod 3.25.55
- **Logging**: tslog 4.9.3

### Python Backend Services
- **Framework**: Flask 3.1.0
- **WSGI Server**: Gunicorn 23.0.0
- **Observability**: OpenTelemetry 1.31.1
- **Monitoring**: Prometheus Client 0.21.1

### Guardrails Backend
- **ML Framework**: PyTorch 2.6.0
- **Transformers**: Hugging Face 4.51.1
- **Privacy**: Presidio Analyzer 2.2.358
- **NLP**: spaCy 3.8.5

## Key Dependencies by Category

### Database & Persistence
```xml
<!-- MySQL -->
<mysql.version>9.3.0</mysql.version>
<clickhouse-java.version>0.9.0</clickhouse-java.version>
<liquibase-clickhouse.version>0.7.2</liquibase-clickhouse.version>
```

### API & Web Framework
```xml
<!-- Dropwizard Ecosystem -->
<dropwizard.version>4.0.14</dropwizard.version>
<dropwizard-guicey.version>7.2.1</dropwizard-guicey.version>
<swagger.version>2.2.33</swagger.version>
```

### AI/ML Libraries
```json
// LangChain4j Integration
"langchain4j": "1.1.0",
"langchain4j-open-ai": "1.1.0",
"langchain4j-anthropic": "1.1.0",
"langchain4j-google-ai-gemini": "1.1.0"
```

### Observability & Monitoring
```xml
<!-- OpenTelemetry Java -->
<opentelemetry.version>2.18.0</opentelemetry.version>
```

```txt
# OpenTelemetry Python
opentelemetry-api==1.31.1
opentelemetry-sdk==1.31.1
opentelemetry-exporter-otlp-proto-http==1.31.1
```

### Testing Framework
```xml
<!-- Java Testing -->
<testcontainers.version>1.21.0</testcontainers.version>
<wiremock.version>3.13.0</wiremock.version>
```

```json
// TypeScript Testing
"vitest": "^3.0.5",
"@playwright/test": "^1.45.3"
```

## Version Management Best Practices

### 1. Dependency Version Strategy

#### Java (Maven)
- **Use BOMs**: Leverage dependency management through BOMs for consistent versions
- **Property Management**: Define versions in properties section for easy updates
- **Avoid Version Conflicts**: Use dependency management to resolve transitive dependencies

```xml
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-dependencies</artifactId>
            <version>${dropwizard.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

#### TypeScript/Node.js
- **Semantic Versioning**: Use caret (^) for minor updates, tilde (~) for patch updates
- **Peer Dependencies**: Define peer dependencies for shared libraries
- **Engines Field**: Specify Node.js version requirements

```json
{
  "engines": {
    "node": ">=18"
  },
  "peerDependencies": {
    "zod": "^3.25.55"
  }
}
```

#### Python
- **Flexible Version Bounds**: Use appropriate version bounds for dependencies
- **Conditional Dependencies**: Use conditional imports for optional dependencies
- **Python Version Support**: Specify supported Python versions clearly

```python
python_requires=">=3.8",
install_requires=[
    "pydantic>=2.0.0,<3.0.0",
    "httpx",
    "openai<2.0.0",  # Pin major version for stability
]
```

### 2. Security & Stability Guidelines

#### Critical Dependencies
- **Database Drivers**: Keep MySQL and ClickHouse drivers updated for security patches
- **HTTP Clients**: Maintain current versions of httpx, axios, node-fetch
- **Validation Libraries**: Keep Pydantic, Zod, and Jakarta Validation updated
- **Authentication**: Regular updates for security-related libraries

#### Version Pinning Strategy
- **Production Dependencies**: Pin major versions for stability
- **Development Dependencies**: Allow minor updates for new features
- **Security Updates**: Automate security patch updates via Dependabot

### 3. Compatibility Matrix

#### Java Compatibility
- **Java 21**: All Java applications require Java 21
- **Dropwizard 4.x**: Compatible with Jakarta EE 10
- **JDBI3**: Works with Java 21 and modern database drivers

#### Python Compatibility
- **Python 3.8-3.12**: Main SDK supports this range
- **Python 3.9-3.12**: Optimizer SDK requires newer Python
- **Pydantic 2.x**: All Python services use Pydantic 2.x

#### Node.js Compatibility
- **Node.js 18+**: Required for TypeScript SDK
- **ES Modules**: All packages use modern ES module syntax
- **TypeScript 5.x**: Latest TypeScript features supported

### 4. Update Strategy

#### Automated Updates
- **Dependabot**: Configured for automated dependency updates
- **Security Patches**: Automatic security updates for critical dependencies
- **Version Bumps**: Regular minor version updates for non-breaking changes

#### Manual Updates
- **Major Versions**: Manual review required for major version updates
- **Breaking Changes**: Test thoroughly before upgrading major versions
- **Migration Guides**: Document breaking changes and migration steps

### 5. Testing & Validation

#### Dependency Testing
- **Integration Tests**: Test all dependency combinations
- **Version Compatibility**: Validate new versions work with existing code
- **Performance Impact**: Monitor performance impact of dependency updates

#### Security Scanning
- **Vulnerability Scanning**: Regular security scans of dependencies
- **License Compliance**: Ensure all dependencies have acceptable licenses
- **Supply Chain Security**: Monitor for supply chain attacks

## Best Practices Summary

1. **Use BOMs and dependency management** for consistent versioning
2. **Pin major versions** for production stability
3. **Allow minor updates** for security patches and bug fixes
4. **Test thoroughly** before major version upgrades
5. **Document breaking changes** and provide migration guides
6. **Automate security updates** while requiring manual review for major changes
7. **Monitor dependency health** and remove unused dependencies
8. **Use semantic versioning** consistently across all languages
9. **Maintain compatibility matrices** for supported versions
10. **Regular dependency audits** to identify security vulnerabilities

## Version Update Checklist

When updating dependencies:

- [ ] Check for breaking changes in release notes
- [ ] Run full test suite including integration tests
- [ ] Update documentation if APIs have changed
- [ ] Verify performance impact
- [ ] Test with all supported language versions
- [ ] Update version compatibility matrix
- [ ] Create migration guide if needed
- [ ] Update CI/CD pipelines if required
