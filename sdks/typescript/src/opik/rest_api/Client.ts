/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import { SystemUsage } from "./api/resources/systemUsage/client/Client";
import { Check } from "./api/resources/check/client/Client";
import { AutomationRuleEvaluators } from "./api/resources/automationRuleEvaluators/client/Client";
import { ChatCompletions } from "./api/resources/chatCompletions/client/Client";
import { Datasets } from "./api/resources/datasets/client/Client";
import { Experiments } from "./api/resources/experiments/client/Client";
import { FeedbackDefinitions } from "./api/resources/feedbackDefinitions/client/Client";
import { LlmProviderKey } from "./api/resources/llmProviderKey/client/Client";
import { Projects } from "./api/resources/projects/client/Client";
import { Prompts } from "./api/resources/prompts/client/Client";
import { Spans } from "./api/resources/spans/client/Client";
import { Traces } from "./api/resources/traces/client/Client";

export declare namespace OpikApiClient {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
        /** Override the Authorization header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Comet-Workspace header */
        workspaceName?: core.Supplier<string | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Authorization header */
        apiKey?: string | undefined;
        /** Override the Comet-Workspace header */
        workspaceName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class OpikApiClient {
    constructor(protected readonly _options: OpikApiClient.Options = {}) {}

    /**
     * @param {OpikApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.isAlive()
     */
    public isAlive(requestOptions?: OpikApiClient.RequestOptions): core.APIPromise<unknown> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "is-alive/ping"
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /is-alive/ping.");
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {OpikApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.version()
     */
    public version(requestOptions?: OpikApiClient.RequestOptions): core.APIPromise<unknown> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "is-alive/ver"
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /is-alive/ver.");
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    protected _systemUsage: SystemUsage | undefined;

    public get systemUsage(): SystemUsage {
        return (this._systemUsage ??= new SystemUsage(this._options));
    }

    protected _check: Check | undefined;

    public get check(): Check {
        return (this._check ??= new Check(this._options));
    }

    protected _automationRuleEvaluators: AutomationRuleEvaluators | undefined;

    public get automationRuleEvaluators(): AutomationRuleEvaluators {
        return (this._automationRuleEvaluators ??= new AutomationRuleEvaluators(this._options));
    }

    protected _chatCompletions: ChatCompletions | undefined;

    public get chatCompletions(): ChatCompletions {
        return (this._chatCompletions ??= new ChatCompletions(this._options));
    }

    protected _datasets: Datasets | undefined;

    public get datasets(): Datasets {
        return (this._datasets ??= new Datasets(this._options));
    }

    protected _experiments: Experiments | undefined;

    public get experiments(): Experiments {
        return (this._experiments ??= new Experiments(this._options));
    }

    protected _feedbackDefinitions: FeedbackDefinitions | undefined;

    public get feedbackDefinitions(): FeedbackDefinitions {
        return (this._feedbackDefinitions ??= new FeedbackDefinitions(this._options));
    }

    protected _llmProviderKey: LlmProviderKey | undefined;

    public get llmProviderKey(): LlmProviderKey {
        return (this._llmProviderKey ??= new LlmProviderKey(this._options));
    }

    protected _projects: Projects | undefined;

    public get projects(): Projects {
        return (this._projects ??= new Projects(this._options));
    }

    protected _prompts: Prompts | undefined;

    public get prompts(): Prompts {
        return (this._prompts ??= new Prompts(this._options));
    }

    protected _spans: Spans | undefined;

    public get spans(): Spans {
        return (this._spans ??= new Spans(this._options));
    }

    protected _traces: Traces | undefined;

    public get traces(): Traces {
        return (this._traces ??= new Traces(this._options));
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
