/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as stream from "stream";

export declare namespace Attachments {
    export interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the Authorization header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Comet-Workspace header */
        workspaceName?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Authorization header */
        apiKey?: string | undefined;
        /** Override the Comet-Workspace header */
        workspaceName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Attachments related resources
 */
export class Attachments {
    constructor(protected readonly _options: Attachments.Options = {}) {}

    /**
     * Attachments list for entity
     *
     * @param {OpikApi.AttachmentListRequest} request
     * @param {Attachments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     *
     * @example
     *     await client.attachments.attachmentList({
     *         projectId: "project_id",
     *         entityType: "trace",
     *         entityId: "entity_id",
     *         path: "path"
     *     })
     */
    public attachmentList(
        request: OpikApi.AttachmentListRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.AttachmentPage> {
        return core.HttpResponsePromise.fromPromise(this.__attachmentList(request, requestOptions));
    }

    private async __attachmentList(
        request: OpikApi.AttachmentListRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.AttachmentPage>> {
        const { page, size, projectId, entityType, entityId, path } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (size != null) {
            _queryParams["size"] = size.toString();
        }

        _queryParams["project_id"] = projectId;
        _queryParams["entity_type"] = serializers.AttachmentListRequestEntityType.jsonOrThrow(entityType, {
            unrecognizedObjectKeys: "strip",
        });
        _queryParams["entity_id"] = entityId;
        _queryParams["path"] = path;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/list",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AttachmentPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/attachment/list.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Complete multipart attachment upload
     *
     * @param {OpikApi.CompleteMultipartUploadRequest} request
     * @param {Attachments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     *
     * @example
     *     await client.attachments.completeMultiPartUpload({
     *         fileName: "file_name",
     *         entityType: "trace",
     *         entityId: "entity_id",
     *         fileSize: 1000000,
     *         uploadId: "upload_id",
     *         uploadedFileParts: [{
     *                 eTag: "e_tag",
     *                 partNumber: 1
     *             }]
     *     })
     */
    public completeMultiPartUpload(
        request: OpikApi.CompleteMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__completeMultiPartUpload(request, requestOptions));
    }

    private async __completeMultiPartUpload(
        request: OpikApi.CompleteMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/upload-complete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CompleteMultipartUploadRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/attachment/upload-complete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete attachments
     *
     * @param {OpikApi.CompleteMultipartUploadRequest} request
     * @param {Attachments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     *
     * @example
     *     await client.attachments.deleteAttachments({
     *         fileName: "file_name",
     *         entityType: "trace",
     *         entityId: "entity_id",
     *         fileSize: 1000000,
     *         uploadId: "upload_id",
     *         uploadedFileParts: [{
     *                 eTag: "e_tag",
     *                 partNumber: 1
     *             }]
     *     })
     */
    public deleteAttachments(
        request: OpikApi.CompleteMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteAttachments(request, requestOptions));
    }

    private async __deleteAttachments(
        request: OpikApi.CompleteMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CompleteMultipartUploadRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/attachment/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Download attachment from MinIO
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     */
    public downloadAttachment(
        request: OpikApi.DownloadAttachmentRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__downloadAttachment(request, requestOptions));
    }

    private async __downloadAttachment(
        request: OpikApi.DownloadAttachmentRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const { workspaceName, containerId, entityType, entityId, fileName, mimeType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (workspaceName != null) {
            _queryParams["workspace_name"] = workspaceName;
        }

        _queryParams["container_id"] = containerId;
        _queryParams["entity_type"] = serializers.DownloadAttachmentRequestEntityType.jsonOrThrow(entityType, {
            unrecognizedObjectKeys: "strip",
        });
        _queryParams["entity_id"] = entityId;
        _queryParams["file_name"] = fileName;
        _queryParams["mime_type"] = mimeType;
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/download",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling GET /v1/private/attachment/download.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Start multipart attachment upload
     *
     * @param {OpikApi.StartMultipartUploadRequest} request
     * @param {Attachments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     *
     * @example
     *     await client.attachments.startMultiPartUpload({
     *         fileName: "file_name",
     *         numOfFileParts: 1,
     *         entityType: "trace",
     *         entityId: "entity_id",
     *         path: "path"
     *     })
     */
    public startMultiPartUpload(
        request: OpikApi.StartMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.StartMultipartUploadResponse> {
        return core.HttpResponsePromise.fromPromise(this.__startMultiPartUpload(request, requestOptions));
    }

    private async __startMultiPartUpload(
        request: OpikApi.StartMultipartUploadRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.StartMultipartUploadResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/upload-start",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.StartMultipartUploadRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.StartMultipartUploadResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/attachment/upload-start.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upload attachment to MinIO
     *
     * @param {OpikApi.UploadAttachmentRequest} request
     * @param {Attachments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.UnauthorizedError}
     * @throws {@link OpikApi.ForbiddenError}
     *
     * @example
     *     await client.attachments.uploadAttachment({
     *         fileName: "file_name",
     *         entityType: "trace",
     *         entityId: "entity_id",
     *         body: {
     *             "key": "value"
     *         }
     *     })
     */
    public uploadAttachment(
        request: OpikApi.UploadAttachmentRequest,
        requestOptions?: Attachments.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__uploadAttachment(request, requestOptions));
    }

    private async __uploadAttachment(
        request: OpikApi.UploadAttachmentRequest,
        requestOptions?: Attachments.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { fileName, projectName, mimeType, entityType, entityId, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["file_name"] = fileName;
        if (projectName != null) {
            _queryParams["project_name"] = projectName;
        }

        if (mimeType != null) {
            _queryParams["mime_type"] = mimeType;
        }

        _queryParams["entity_type"] = serializers.UploadAttachmentRequestEntityType.jsonOrThrow(entityType, {
            unrecognizedObjectKeys: "strip",
        });
        _queryParams["entity_id"] = entityId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/attachment/upload",
            ),
            method: "PUT",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.attachments.uploadAttachment.Request.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new OpikApi.ForbiddenError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PUT /v1/private/attachment/upload.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
