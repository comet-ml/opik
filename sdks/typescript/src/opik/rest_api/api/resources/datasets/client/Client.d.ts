/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
import * as stream from "stream";
export declare namespace Datasets {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Dataset resources
 */
export declare class Datasets {
    protected readonly _options: Datasets.Options;
    constructor(_options?: Datasets.Options);
    /**
     * Find datasets
     *
     * @param {OpikApi.FindDatasetsRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.findDatasets()
     */
    findDatasets(request?: OpikApi.FindDatasetsRequest, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetPagePublic>;
    /**
     * Create dataset
     *
     * @param {OpikApi.DatasetWrite} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.createDataset({
     *         name: "name"
     *     })
     */
    createDataset(request: OpikApi.DatasetWrite, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Create/update dataset items based on dataset item id
     *
     * @param {OpikApi.DatasetItemBatchWrite} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.createOrUpdateDatasetItems({
     *         items: [{
     *                 source: "manual"
     *             }]
     *     })
     */
    createOrUpdateDatasetItems(request: OpikApi.DatasetItemBatchWrite, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Get dataset by id
     *
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.getDatasetById("id")
     */
    getDatasetById(id: string, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetPublic>;
    /**
     * Update dataset by id
     *
     * @param {string} id
     * @param {OpikApi.DatasetUpdate} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.updateDataset("id", {
     *         name: "name"
     *     })
     */
    updateDataset(id: string, request: OpikApi.DatasetUpdate, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Delete dataset by id
     *
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.deleteDataset("id")
     */
    deleteDataset(id: string, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Delete dataset by name
     *
     * @param {OpikApi.DatasetIdentifier} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.deleteDatasetByName({
     *         datasetName: "dataset_name"
     *     })
     */
    deleteDatasetByName(request: OpikApi.DatasetIdentifier, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Delete dataset items
     *
     * @param {OpikApi.DatasetItemsDelete} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.deleteDatasetItems({
     *         itemIds: ["item_ids"]
     *     })
     */
    deleteDatasetItems(request: OpikApi.DatasetItemsDelete, requestOptions?: Datasets.RequestOptions): core.APIPromise<void>;
    /**
     * Find dataset items with experiment items
     *
     * @param {string} id
     * @param {OpikApi.FindDatasetItemsWithExperimentItemsRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.findDatasetItemsWithExperimentItems("id", {
     *         experimentIds: "experiment_ids"
     *     })
     */
    findDatasetItemsWithExperimentItems(id: string, request: OpikApi.FindDatasetItemsWithExperimentItemsRequest, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetItemPageCompare>;
    /**
     * Get dataset by name
     *
     * @param {OpikApi.DatasetIdentifierPublic} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.getDatasetByIdentifier({
     *         datasetName: "dataset_name"
     *     })
     */
    getDatasetByIdentifier(request: OpikApi.DatasetIdentifierPublic, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetPublic>;
    /**
     * Get dataset item by id
     *
     * @param {string} itemId
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.getDatasetItemById("itemId")
     */
    getDatasetItemById(itemId: string, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetItemPublic>;
    /**
     * Get dataset items
     *
     * @param {string} id
     * @param {OpikApi.GetDatasetItemsRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.datasets.getDatasetItems("id")
     */
    getDatasetItems(id: string, request?: OpikApi.GetDatasetItemsRequest, requestOptions?: Datasets.RequestOptions): core.APIPromise<OpikApi.DatasetItemPagePublic>;
    /**
     * Stream dataset items
     */
    streamDatasetItems(request: OpikApi.DatasetItemStreamRequest, requestOptions?: Datasets.RequestOptions): core.APIPromise<stream.Readable>;
}
