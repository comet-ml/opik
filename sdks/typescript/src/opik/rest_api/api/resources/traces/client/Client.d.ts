/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
export declare namespace Traces {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Trace related resources
 */
export declare class Traces {
    protected readonly _options: Traces.Options;
    constructor(_options?: Traces.Options);
    /**
     * Add trace feedback score
     *
     * @param {string} id
     * @param {OpikApi.FeedbackScore} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.addTraceFeedbackScore("id", {
     *         name: "name",
     *         value: 1.1,
     *         source: "ui"
     *     })
     */
    addTraceFeedbackScore(id: string, request: OpikApi.FeedbackScore, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Get traces by project_name or project_id
     *
     * @param {OpikApi.GetTracesByProjectRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTracesByProject()
     */
    getTracesByProject(request?: OpikApi.GetTracesByProjectRequest, requestOptions?: Traces.RequestOptions): core.APIPromise<OpikApi.TracePagePublic>;
    /**
     * Get trace
     *
     * @param {OpikApi.TraceWrite} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.createTrace({
     *         name: "name",
     *         startTime: "2024-01-15T09:30:00Z"
     *     })
     */
    createTrace(request: OpikApi.TraceWrite, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Create traces
     *
     * @param {OpikApi.TraceBatchWrite} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.createTraces({
     *         traces: [{
     *                 name: "name",
     *                 startTime: "2024-01-15T09:30:00Z"
     *             }]
     *     })
     */
    createTraces(request: OpikApi.TraceBatchWrite, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Get trace by id
     *
     * @param {string} id
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTraceById("id")
     */
    getTraceById(id: string, requestOptions?: Traces.RequestOptions): core.APIPromise<OpikApi.TracePublic>;
    /**
     * Delete trace by id
     *
     * @param {string} id
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceById("id")
     */
    deleteTraceById(id: string, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Update trace by id
     *
     * @param {string} id
     * @param {OpikApi.TraceUpdate} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.updateTrace("id")
     */
    updateTrace(id: string, request?: OpikApi.TraceUpdate, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Delete trace feedback score
     *
     * @param {string} id
     * @param {OpikApi.DeleteFeedbackScore} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceFeedbackScore("id", {
     *         name: "name"
     *     })
     */
    deleteTraceFeedbackScore(id: string, request: OpikApi.DeleteFeedbackScore, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Delete traces
     *
     * @param {OpikApi.BatchDelete} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraces({
     *         ids: ["ids"]
     *     })
     */
    deleteTraces(request: OpikApi.BatchDelete, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
    /**
     * Find Feedback Score names
     *
     * @param {OpikApi.FindFeedbackScoreNames2Request} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.findFeedbackScoreNames2()
     */
    findFeedbackScoreNames2(request?: OpikApi.FindFeedbackScoreNames2Request, requestOptions?: Traces.RequestOptions): core.APIPromise<string[]>;
    /**
     * Get trace stats
     *
     * @param {OpikApi.GetTraceStatsRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTraceStats()
     */
    getTraceStats(request?: OpikApi.GetTraceStatsRequest, requestOptions?: Traces.RequestOptions): core.APIPromise<OpikApi.ProjectStatsPublic>;
    /**
     * Batch feedback scoring for traces
     *
     * @param {OpikApi.FeedbackScoreBatch} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.scoreBatchOfTraces({
     *         scores: [{
     *                 id: "id",
     *                 name: "name",
     *                 value: 1.1,
     *                 source: "ui"
     *             }]
     *     })
     */
    scoreBatchOfTraces(request: OpikApi.FeedbackScoreBatch, requestOptions?: Traces.RequestOptions): core.APIPromise<void>;
}
