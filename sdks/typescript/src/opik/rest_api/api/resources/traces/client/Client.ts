/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as stream from "stream";

export declare namespace Traces {
    export interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the Authorization header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Comet-Workspace header */
        workspaceName?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Authorization header */
        apiKey?: string | undefined;
        /** Override the Comet-Workspace header */
        workspaceName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Trace related resources
 */
export class Traces {
    constructor(protected readonly _options: Traces.Options = {}) {}

    /**
     * Add trace comment
     *
     * @param {string} id
     * @param {OpikApi.Comment} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.addTraceComment("id", {
     *         text: "text"
     *     })
     */
    public addTraceComment(
        id: string,
        request: OpikApi.Comment,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__addTraceComment(id, request, requestOptions));
    }

    private async __addTraceComment(
        id: string,
        request: OpikApi.Comment,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}/comments`,
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.Comment.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/traces/{id}/comments.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Add trace feedback score
     *
     * @param {string} id
     * @param {OpikApi.FeedbackScore} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.addTraceFeedbackScore("id", {
     *         name: "name",
     *         value: 1.1,
     *         source: "ui"
     *     })
     */
    public addTraceFeedbackScore(
        id: string,
        request: OpikApi.FeedbackScore,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__addTraceFeedbackScore(id, request, requestOptions));
    }

    private async __addTraceFeedbackScore(
        id: string,
        request: OpikApi.FeedbackScore,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}/feedback-scores`,
            ),
            method: "PUT",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.FeedbackScore.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PUT /v1/private/traces/{id}/feedback-scores.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Close trace thread
     *
     * @param {OpikApi.TraceThreadIdentifier} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.closeTraceThread({
     *         threadId: "thread_id"
     *     })
     */
    public closeTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__closeTraceThread(request, requestOptions));
    }

    private async __closeTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/threads/close",
            ),
            method: "PUT",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceThreadIdentifier.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PUT /v1/private/traces/threads/close.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get traces by project_name or project_id
     *
     * @param {OpikApi.GetTracesByProjectRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTracesByProject()
     */
    public getTracesByProject(
        request: OpikApi.GetTracesByProjectRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.TracePagePublic> {
        return core.HttpResponsePromise.fromPromise(this.__getTracesByProject(request, requestOptions));
    }

    private async __getTracesByProject(
        request: OpikApi.GetTracesByProjectRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.TracePagePublic>> {
        const { page, size, projectName, projectId, filters, truncate, sorting, exclude } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (size != null) {
            _queryParams["size"] = size.toString();
        }

        if (projectName != null) {
            _queryParams["project_name"] = projectName;
        }

        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        if (filters != null) {
            _queryParams["filters"] = filters;
        }

        if (truncate != null) {
            _queryParams["truncate"] = truncate.toString();
        }

        if (sorting != null) {
            _queryParams["sorting"] = sorting;
        }

        if (exclude != null) {
            _queryParams["exclude"] = exclude;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TracePagePublic.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/traces.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace
     *
     * @param {OpikApi.TraceWrite} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.createTrace({
     *         startTime: "2024-01-15T09:30:00Z"
     *     })
     */
    public createTrace(
        request: OpikApi.TraceWrite,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__createTrace(request, requestOptions));
    }

    private async __createTrace(
        request: OpikApi.TraceWrite,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceWrite.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/traces.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create traces
     *
     * @param {OpikApi.TraceBatchWrite} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.createTraces({
     *         traces: [{
     *                 startTime: "2024-01-15T09:30:00Z"
     *             }]
     *     })
     */
    public createTraces(
        request: OpikApi.TraceBatchWrite,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__createTraces(request, requestOptions));
    }

    private async __createTraces(
        request: OpikApi.TraceBatchWrite,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/batch",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceBatchWrite.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/traces/batch.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace by id
     *
     * @param {string} id
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTraceById("id")
     */
    public getTraceById(
        id: string,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.TracePublic> {
        return core.HttpResponsePromise.fromPromise(this.__getTraceById(id, requestOptions));
    }

    private async __getTraceById(
        id: string,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.TracePublic>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TracePublic.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/traces/{id}.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete trace by id
     *
     * @param {string} id
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceById("id")
     */
    public deleteTraceById(id: string, requestOptions?: Traces.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTraceById(id, requestOptions));
    }

    private async __deleteTraceById(
        id: string,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling DELETE /v1/private/traces/{id}.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update trace by id
     *
     * @param {string} id
     * @param {OpikApi.TraceUpdate} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.updateTrace("id")
     */
    public updateTrace(
        id: string,
        request: OpikApi.TraceUpdate = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__updateTrace(id, request, requestOptions));
    }

    private async __updateTrace(
        id: string,
        request: OpikApi.TraceUpdate = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling PATCH /v1/private/traces/{id}.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete trace comments
     *
     * @param {OpikApi.BatchDelete} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceComments({
     *         ids: ["ids"]
     *     })
     */
    public deleteTraceComments(
        request: OpikApi.BatchDelete,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTraceComments(request, requestOptions));
    }

    private async __deleteTraceComments(
        request: OpikApi.BatchDelete,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/comments/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchDelete.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/traces/comments/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete trace feedback score
     *
     * @param {string} id
     * @param {OpikApi.DeleteFeedbackScore} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceFeedbackScore("id", {
     *         name: "name"
     *     })
     */
    public deleteTraceFeedbackScore(
        id: string,
        request: OpikApi.DeleteFeedbackScore,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTraceFeedbackScore(id, request, requestOptions));
    }

    private async __deleteTraceFeedbackScore(
        id: string,
        request: OpikApi.DeleteFeedbackScore,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(id)}/feedback-scores/delete`,
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.DeleteFeedbackScore.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/traces/{id}/feedback-scores/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete trace threads
     *
     * @param {OpikApi.DeleteTraceThreads} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraceThreads({
     *         threadIds: ["thread_ids"]
     *     })
     */
    public deleteTraceThreads(
        request: OpikApi.DeleteTraceThreads,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTraceThreads(request, requestOptions));
    }

    private async __deleteTraceThreads(
        request: OpikApi.DeleteTraceThreads,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/threads/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.DeleteTraceThreads.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/traces/threads/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete traces
     *
     * @param {OpikApi.BatchDelete} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.deleteTraces({
     *         ids: ["ids"]
     *     })
     */
    public deleteTraces(
        request: OpikApi.BatchDelete,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTraces(request, requestOptions));
    }

    private async __deleteTraces(
        request: OpikApi.BatchDelete,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchDelete.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/traces/delete.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Find Feedback Score names
     *
     * @param {OpikApi.FindFeedbackScoreNames2Request} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.findFeedbackScoreNames2()
     */
    public findFeedbackScoreNames2(
        request: OpikApi.FindFeedbackScoreNames2Request = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<string[]> {
        return core.HttpResponsePromise.fromPromise(this.__findFeedbackScoreNames2(request, requestOptions));
    }

    private async __findFeedbackScoreNames2(
        request: OpikApi.FindFeedbackScoreNames2Request = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<string[]>> {
        const { projectId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/feedback-scores/names",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.traces.findFeedbackScoreNames2.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling GET /v1/private/traces/feedback-scores/names.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace stats
     *
     * @param {OpikApi.GetTraceStatsRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTraceStats()
     */
    public getTraceStats(
        request: OpikApi.GetTraceStatsRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.ProjectStatsPublic> {
        return core.HttpResponsePromise.fromPromise(this.__getTraceStats(request, requestOptions));
    }

    private async __getTraceStats(
        request: OpikApi.GetTraceStatsRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.ProjectStatsPublic>> {
        const { projectId, projectName, filters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        if (projectName != null) {
            _queryParams["project_name"] = projectName;
        }

        if (filters != null) {
            _queryParams["filters"] = filters;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/stats",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ProjectStatsPublic.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/traces/stats.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace comment
     *
     * @param {string} commentId
     * @param {string} traceId
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.traces.getTraceComment("commentId", "traceId")
     */
    public getTraceComment(
        commentId: string,
        traceId: string,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.Comment> {
        return core.HttpResponsePromise.fromPromise(this.__getTraceComment(commentId, traceId, requestOptions));
    }

    private async __getTraceComment(
        commentId: string,
        traceId: string,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.Comment>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/${encodeURIComponent(traceId)}/comments/${encodeURIComponent(commentId)}`,
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Comment.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling GET /v1/private/traces/{traceId}/comments/{commentId}.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace thread
     *
     * @param {OpikApi.TraceThreadIdentifier} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.traces.getTraceThread({
     *         threadId: "thread_id"
     *     })
     */
    public getTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.TraceThread> {
        return core.HttpResponsePromise.fromPromise(this.__getTraceThread(request, requestOptions));
    }

    private async __getTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.TraceThread>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/threads/retrieve",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceThreadIdentifier.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TraceThread.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/traces/threads/retrieve.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get trace threads
     *
     * @param {OpikApi.GetTraceThreadsRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.getTraceThreads()
     */
    public getTraceThreads(
        request: OpikApi.GetTraceThreadsRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<OpikApi.TraceThreadPage> {
        return core.HttpResponsePromise.fromPromise(this.__getTraceThreads(request, requestOptions));
    }

    private async __getTraceThreads(
        request: OpikApi.GetTraceThreadsRequest = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<OpikApi.TraceThreadPage>> {
        const { page, size, projectName, projectId, truncate, filters, sorting } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (size != null) {
            _queryParams["size"] = size.toString();
        }

        if (projectName != null) {
            _queryParams["project_name"] = projectName;
        }

        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        if (truncate != null) {
            _queryParams["truncate"] = truncate.toString();
        }

        if (filters != null) {
            _queryParams["filters"] = filters;
        }

        if (sorting != null) {
            _queryParams["sorting"] = sorting;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/threads",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TraceThreadPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/traces/threads.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Open trace thread
     *
     * @param {OpikApi.TraceThreadIdentifier} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.openTraceThread({
     *         threadId: "thread_id"
     *     })
     */
    public openTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__openTraceThread(request, requestOptions));
    }

    private async __openTraceThread(
        request: OpikApi.TraceThreadIdentifier,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/threads/open",
            ),
            method: "PUT",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceThreadIdentifier.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PUT /v1/private/traces/threads/open.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Batch feedback scoring for traces
     *
     * @param {OpikApi.FeedbackScoreBatch} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.scoreBatchOfTraces({
     *         scores: [{
     *                 id: "id",
     *                 name: "name",
     *                 value: 1.1,
     *                 source: "ui"
     *             }]
     *     })
     */
    public scoreBatchOfTraces(
        request: OpikApi.FeedbackScoreBatch,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__scoreBatchOfTraces(request, requestOptions));
    }

    private async __scoreBatchOfTraces(
        request: OpikApi.FeedbackScoreBatch,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/feedback-scores",
            ),
            method: "PUT",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.FeedbackScoreBatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PUT /v1/private/traces/feedback-scores.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search traces
     * @throws {@link OpikApi.BadRequestError}
     * @throws {@link OpikApi.UnauthorizedError}
     */
    public searchTraces(
        request: OpikApi.TraceSearchStreamRequestPublic = {},
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__searchTraces(request, requestOptions));
    }

    private async __searchTraces(
        request: OpikApi.TraceSearchStreamRequestPublic = {},
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/traces/search",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TraceSearchStreamRequestPublic.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpikApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new OpikApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/traces/search.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update trace comment by id
     *
     * @param {string} commentId
     * @param {OpikApi.Comment} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.traces.updateTraceComment("commentId", {
     *         text: "text"
     *     })
     */
    public updateTraceComment(
        commentId: string,
        request: OpikApi.Comment,
        requestOptions?: Traces.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__updateTraceComment(commentId, request, requestOptions));
    }

    private async __updateTraceComment(
        commentId: string,
        request: OpikApi.Comment,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/traces/comments/${encodeURIComponent(commentId)}`,
            ),
            method: "PATCH",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.Comment.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/private/traces/comments/{commentId}.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
