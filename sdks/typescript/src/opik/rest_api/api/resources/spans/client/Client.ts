/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Spans {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
        /** Override the Authorization header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Comet-Workspace header */
        workspaceName?: core.Supplier<string | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Authorization header */
        apiKey?: string | undefined;
        /** Override the Comet-Workspace header */
        workspaceName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Span related resources
 */
export class Spans {
    constructor(protected readonly _options: Spans.Options = {}) {}

    /**
     * Add span feedback score
     *
     * @param {string} id
     * @param {OpikApi.FeedbackScore} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.addSpanFeedbackScore("id", {
     *         name: "name",
     *         value: 1.1,
     *         source: "ui"
     *     })
     */
    public addSpanFeedbackScore(
        id: string,
        request: OpikApi.FeedbackScore,
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        `v1/private/spans/${encodeURIComponent(id)}/feedback-scores`
                    ),
                    method: "PUT",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.FeedbackScore.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling PUT /v1/private/spans/{id}/feedback-scores."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Get spans by project_name or project_id and optionally by trace_id and/or type
     *
     * @param {OpikApi.GetSpansByProjectRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.getSpansByProject()
     */
    public getSpansByProject(
        request: OpikApi.GetSpansByProjectRequest = {},
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<OpikApi.SpanPagePublic> {
        return core.APIPromise.from(
            (async () => {
                const { page, size, projectName, projectId, traceId, type: type_, filters, truncate } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (size != null) {
                    _queryParams["size"] = size.toString();
                }
                if (projectName != null) {
                    _queryParams["project_name"] = projectName;
                }
                if (projectId != null) {
                    _queryParams["project_id"] = projectId;
                }
                if (traceId != null) {
                    _queryParams["trace_id"] = traceId;
                }
                if (type_ != null) {
                    _queryParams["type"] = type_;
                }
                if (filters != null) {
                    _queryParams["filters"] = filters;
                }
                if (truncate != null) {
                    _queryParams["truncate"] = truncate.toString();
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans"
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.SpanPagePublic.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/spans.");
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Create span
     *
     * @param {OpikApi.SpanWrite} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.createSpan({
     *         traceId: "trace_id",
     *         name: "name",
     *         type: "general",
     *         startTime: "2024-01-15T09:30:00Z"
     *     })
     */
    public createSpan(request: OpikApi.SpanWrite, requestOptions?: Spans.RequestOptions): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans"
                    ),
                    method: "POST",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.SpanWrite.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/spans.");
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Create spans
     *
     * @param {OpikApi.SpanBatchWrite} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.createSpans({
     *         spans: [{
     *                 traceId: "trace_id",
     *                 name: "name",
     *                 type: "general",
     *                 startTime: "2024-01-15T09:30:00Z"
     *             }]
     *     })
     */
    public createSpans(request: OpikApi.SpanBatchWrite, requestOptions?: Spans.RequestOptions): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans/batch"
                    ),
                    method: "POST",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.SpanBatchWrite.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling POST /v1/private/spans/batch."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Get span by id
     *
     * @param {string} id
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.spans.getSpanById("id")
     */
    public getSpanById(id: string, requestOptions?: Spans.RequestOptions): core.APIPromise<OpikApi.SpanPublic> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        `v1/private/spans/${encodeURIComponent(id)}`
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.SpanPublic.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 404:
                            throw new OpikApi.NotFoundError(_response.error.body);
                        default:
                            throw new errors.OpikApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling GET /v1/private/spans/{id}."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Delete span by id
     *
     * @param {string} id
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotImplementedError}
     *
     * @example
     *     await client.spans.deleteSpanById("id")
     */
    public deleteSpanById(id: string, requestOptions?: Spans.RequestOptions): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        `v1/private/spans/${encodeURIComponent(id)}`
                    ),
                    method: "DELETE",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 501:
                            throw new OpikApi.NotImplementedError(_response.error.body);
                        default:
                            throw new errors.OpikApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling DELETE /v1/private/spans/{id}."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Update span by id
     *
     * @param {string} id
     * @param {OpikApi.SpanUpdate} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.spans.updateSpan("id", {
     *         traceId: "trace_id"
     *     })
     */
    public updateSpan(
        id: string,
        request: OpikApi.SpanUpdate,
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        `v1/private/spans/${encodeURIComponent(id)}`
                    ),
                    method: "PATCH",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.SpanUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 404:
                            throw new OpikApi.NotFoundError(_response.error.body);
                        default:
                            throw new errors.OpikApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling PATCH /v1/private/spans/{id}."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Delete span feedback score
     *
     * @param {string} id
     * @param {OpikApi.DeleteFeedbackScore} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.deleteSpanFeedbackScore("id", {
     *         name: "name"
     *     })
     */
    public deleteSpanFeedbackScore(
        id: string,
        request: OpikApi.DeleteFeedbackScore,
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        `v1/private/spans/${encodeURIComponent(id)}/feedback-scores/delete`
                    ),
                    method: "POST",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.DeleteFeedbackScore.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling POST /v1/private/spans/{id}/feedback-scores/delete."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Find Feedback Score names
     *
     * @param {OpikApi.FindFeedbackScoreNames1Request} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.findFeedbackScoreNames1()
     */
    public findFeedbackScoreNames1(
        request: OpikApi.FindFeedbackScoreNames1Request = {},
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<string[]> {
        return core.APIPromise.from(
            (async () => {
                const { projectId, type: type_ } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (projectId != null) {
                    _queryParams["project_id"] = projectId;
                }
                if (type_ != null) {
                    _queryParams["type"] = type_;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans/feedback-scores/names"
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.spans.findFeedbackScoreNames1.Response.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling GET /v1/private/spans/feedback-scores/names."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Get span stats
     *
     * @param {OpikApi.GetSpanStatsRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.getSpanStats()
     */
    public getSpanStats(
        request: OpikApi.GetSpanStatsRequest = {},
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<OpikApi.ProjectStatsPublic> {
        return core.APIPromise.from(
            (async () => {
                const { projectId, projectName, traceId, type: type_, filters } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (projectId != null) {
                    _queryParams["project_id"] = projectId;
                }
                if (projectName != null) {
                    _queryParams["project_name"] = projectName;
                }
                if (traceId != null) {
                    _queryParams["trace_id"] = traceId;
                }
                if (type_ != null) {
                    _queryParams["type"] = type_;
                }
                if (filters != null) {
                    _queryParams["filters"] = filters;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans/stats"
                    ),
                    method: "GET",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.ProjectStatsPublic.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling GET /v1/private/spans/stats."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Batch feedback scoring for spans
     *
     * @param {OpikApi.FeedbackScoreBatch} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.scoreBatchOfSpans({
     *         scores: [{
     *                 id: "id",
     *                 name: "name",
     *                 value: 1.1,
     *                 source: "ui"
     *             }]
     *     })
     */
    public scoreBatchOfSpans(
        request: OpikApi.FeedbackScoreBatch,
        requestOptions?: Spans.RequestOptions
    ): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.OpikApiEnvironment.Default,
                        "v1/private/spans/feedback-scores"
                    ),
                    method: "PUT",
                    headers: {
                        "Comet-Workspace":
                            (await core.Supplier.get(this._options.workspaceName)) != null
                                ? await core.Supplier.get(this._options.workspaceName)
                                : undefined,
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.FeedbackScoreBatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    withCredentials: true,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.OpikApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.OpikApiTimeoutError(
                            "Timeout exceeded when calling PUT /v1/private/spans/feedback-scores."
                        );
                    case "unknown":
                        throw new errors.OpikApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
