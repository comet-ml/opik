/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
export declare namespace Spans {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Span related resources
 */
export declare class Spans {
    protected readonly _options: Spans.Options;
    constructor(_options?: Spans.Options);
    /**
     * Add span feedback score
     *
     * @param {string} id
     * @param {OpikApi.FeedbackScore} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.addSpanFeedbackScore("id", {
     *         name: "name",
     *         value: 1.1,
     *         source: "ui"
     *     })
     */
    addSpanFeedbackScore(id: string, request: OpikApi.FeedbackScore, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Get spans by project_name or project_id and optionally by trace_id and/or type
     *
     * @param {OpikApi.GetSpansByProjectRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.getSpansByProject()
     */
    getSpansByProject(request?: OpikApi.GetSpansByProjectRequest, requestOptions?: Spans.RequestOptions): core.APIPromise<OpikApi.SpanPagePublic>;
    /**
     * Create span
     *
     * @param {OpikApi.SpanWrite} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.createSpan({
     *         traceId: "trace_id",
     *         name: "name",
     *         type: "general",
     *         startTime: "2024-01-15T09:30:00Z"
     *     })
     */
    createSpan(request: OpikApi.SpanWrite, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Create spans
     *
     * @param {OpikApi.SpanBatchWrite} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.createSpans({
     *         spans: [{
     *                 traceId: "trace_id",
     *                 name: "name",
     *                 type: "general",
     *                 startTime: "2024-01-15T09:30:00Z"
     *             }]
     *     })
     */
    createSpans(request: OpikApi.SpanBatchWrite, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Get span by id
     *
     * @param {string} id
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.spans.getSpanById("id")
     */
    getSpanById(id: string, requestOptions?: Spans.RequestOptions): core.APIPromise<OpikApi.SpanPublic>;
    /**
     * Delete span by id
     *
     * @param {string} id
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotImplementedError}
     *
     * @example
     *     await client.spans.deleteSpanById("id")
     */
    deleteSpanById(id: string, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Update span by id
     *
     * @param {string} id
     * @param {OpikApi.SpanUpdate} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.spans.updateSpan("id", {
     *         traceId: "trace_id"
     *     })
     */
    updateSpan(id: string, request: OpikApi.SpanUpdate, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Delete span feedback score
     *
     * @param {string} id
     * @param {OpikApi.DeleteFeedbackScore} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.deleteSpanFeedbackScore("id", {
     *         name: "name"
     *     })
     */
    deleteSpanFeedbackScore(id: string, request: OpikApi.DeleteFeedbackScore, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
    /**
     * Find Feedback Score names
     *
     * @param {OpikApi.FindFeedbackScoreNames1Request} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.findFeedbackScoreNames1()
     */
    findFeedbackScoreNames1(request?: OpikApi.FindFeedbackScoreNames1Request, requestOptions?: Spans.RequestOptions): core.APIPromise<string[]>;
    /**
     * Get span stats
     *
     * @param {OpikApi.GetSpanStatsRequest} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.getSpanStats()
     */
    getSpanStats(request?: OpikApi.GetSpanStatsRequest, requestOptions?: Spans.RequestOptions): core.APIPromise<OpikApi.ProjectStatsPublic>;
    /**
     * Batch feedback scoring for spans
     *
     * @param {OpikApi.FeedbackScoreBatch} request
     * @param {Spans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.spans.scoreBatchOfSpans({
     *         scores: [{
     *                 id: "id",
     *                 name: "name",
     *                 value: 1.1,
     *                 source: "ui"
     *             }]
     *     })
     */
    scoreBatchOfSpans(request: OpikApi.FeedbackScoreBatch, requestOptions?: Spans.RequestOptions): core.APIPromise<void>;
}
