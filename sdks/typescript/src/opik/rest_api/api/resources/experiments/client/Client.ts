/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import * as stream from "stream";

export declare namespace Experiments {
    export interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the Authorization header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Comet-Workspace header */
        workspaceName?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Authorization header */
        apiKey?: string | undefined;
        /** Override the Comet-Workspace header */
        workspaceName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Experiment resources
 */
export class Experiments {
    constructor(protected readonly _options: Experiments.Options = {}) {}

    /**
     * Find experiments
     *
     * @param {OpikApi.FindExperimentsRequest} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.findExperiments()
     */
    public async findExperiments(
        request: OpikApi.FindExperimentsRequest = {},
        requestOptions?: Experiments.RequestOptions,
    ): Promise<OpikApi.ExperimentPagePublic> {
        const { page, size, datasetId, name, datasetDeleted, promptId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (size != null) {
            _queryParams["size"] = size.toString();
        }

        if (datasetId != null) {
            _queryParams["datasetId"] = datasetId;
        }

        if (name != null) {
            _queryParams["name"] = name;
        }

        if (datasetDeleted != null) {
            _queryParams["dataset_deleted"] = datasetDeleted.toString();
        }

        if (promptId != null) {
            _queryParams["prompt_id"] = promptId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExperimentPagePublic.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/experiments.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create experiment
     *
     * @param {OpikApi.ExperimentWrite} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.createExperiment({
     *         datasetName: "dataset_name"
     *     })
     */
    public async createExperiment(
        request: OpikApi.ExperimentWrite,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExperimentWrite.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling POST /v1/private/experiments.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create experiment items
     *
     * @param {OpikApi.ExperimentItemsBatch} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.createExperimentItems({
     *         experimentItems: [{
     *                 experimentId: "experiment_id",
     *                 datasetItemId: "dataset_item_id",
     *                 traceId: "trace_id"
     *             }]
     *     })
     */
    public async createExperimentItems(
        request: OpikApi.ExperimentItemsBatch,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/items",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExperimentItemsBatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/experiments/items.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete experiment items
     *
     * @param {OpikApi.ExperimentItemsDelete} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.deleteExperimentItems({
     *         ids: ["ids"]
     *     })
     */
    public async deleteExperimentItems(
        request: OpikApi.ExperimentItemsDelete,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/items/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExperimentItemsDelete.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/experiments/items/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete experiments by id
     *
     * @param {OpikApi.ExperimentsDelete} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.deleteExperimentsById({
     *         ids: ["ids"]
     *     })
     */
    public async deleteExperimentsById(
        request: OpikApi.ExperimentsDelete,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/delete",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExperimentsDelete.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/experiments/delete.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Find Feedback Score names
     *
     * @param {OpikApi.FindFeedbackScoreNamesRequest} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.experiments.findFeedbackScoreNames()
     */
    public async findFeedbackScoreNames(
        request: OpikApi.FindFeedbackScoreNamesRequest = {},
        requestOptions?: Experiments.RequestOptions,
    ): Promise<string[]> {
        const { experimentIds } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (experimentIds != null) {
            _queryParams["experiment_ids"] = experimentIds;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/feedback-scores/names",
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.experiments.findFeedbackScoreNames.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling GET /v1/private/experiments/feedback-scores/names.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get experiment by id
     *
     * @param {string} id
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.experiments.getExperimentById("id")
     */
    public async getExperimentById(
        id: string,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<OpikApi.ExperimentPublic> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/experiments/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExperimentPublic.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError("Timeout exceeded when calling GET /v1/private/experiments/{id}.");
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get experiment by name
     *
     * @param {OpikApi.IdentifierPublic} request
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.experiments.getExperimentByName({
     *         name: "name"
     *     })
     */
    public async getExperimentByName(
        request: OpikApi.IdentifierPublic,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<OpikApi.ExperimentPublic> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/retrieve",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.IdentifierPublic.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExperimentPublic.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/experiments/retrieve.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get experiment item by id
     *
     * @param {string} id
     * @param {Experiments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotFoundError}
     *
     * @example
     *     await client.experiments.getExperimentItemById("id")
     */
    public async getExperimentItemById(
        id: string,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<OpikApi.ExperimentItemPublic> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                `v1/private/experiments/items/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExperimentItemPublic.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new OpikApi.NotFoundError(_response.error.body);
                default:
                    throw new errors.OpikApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling GET /v1/private/experiments/items/{id}.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Stream experiment items
     */
    public async streamExperimentItems(
        request: OpikApi.ExperimentItemStreamRequest,
        requestOptions?: Experiments.RequestOptions,
    ): Promise<stream.Readable> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpikApiEnvironment.Default,
                "v1/private/experiments/items/stream",
            ),
            method: "POST",
            headers: {
                "Comet-Workspace":
                    (await core.Supplier.get(this._options.workspaceName)) != null
                        ? await core.Supplier.get(this._options.workspaceName)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExperimentItemStreamRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            withCredentials: true,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpikApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpikApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpikApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/private/experiments/items/stream.",
                );
            case "unknown":
                throw new errors.OpikApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
