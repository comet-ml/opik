/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpikApi from "../../../index";
export declare namespace ChatCompletions {
    interface Options {
        environment?: core.Supplier<environments.OpikApiEnvironment | string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Chat Completions related resources
 */
export declare class ChatCompletions {
    protected readonly _options: ChatCompletions.Options;
    constructor(_options?: ChatCompletions.Options);
    /**
     * Get chat completions
     *
     * @param {OpikApi.ChatCompletionRequest} request
     * @param {ChatCompletions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpikApi.NotImplementedError}
     *
     * @example
     *     await client.chatCompletions.getChatCompletions()
     */
    getChatCompletions(request?: OpikApi.ChatCompletionRequest, requestOptions?: ChatCompletions.RequestOptions): core.APIPromise<void>;
}
