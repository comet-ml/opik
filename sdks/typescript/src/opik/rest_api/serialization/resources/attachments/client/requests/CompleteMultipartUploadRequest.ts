/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as OpikApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { CompleteMultipartUploadRequestEntityType } from "../../types/CompleteMultipartUploadRequestEntityType";
import { MultipartUploadPart } from "../../../../types/MultipartUploadPart";

export const CompleteMultipartUploadRequest: core.serialization.Schema<
    serializers.CompleteMultipartUploadRequest.Raw,
    OpikApi.CompleteMultipartUploadRequest
> = core.serialization.object({
    fileName: core.serialization.property("file_name", core.serialization.string()),
    projectName: core.serialization.property("project_name", core.serialization.string().optional()),
    entityType: core.serialization.property("entity_type", CompleteMultipartUploadRequestEntityType),
    entityId: core.serialization.property("entity_id", core.serialization.string()),
    fileSize: core.serialization.property("file_size", core.serialization.number()),
    mimeType: core.serialization.property("mime_type", core.serialization.string().optional()),
    uploadId: core.serialization.property("upload_id", core.serialization.string()),
    uploadedFileParts: core.serialization.property("uploaded_file_parts", core.serialization.list(MultipartUploadPart)),
});

export declare namespace CompleteMultipartUploadRequest {
    export interface Raw {
        file_name: string;
        project_name?: string | null;
        entity_type: CompleteMultipartUploadRequestEntityType.Raw;
        entity_id: string;
        file_size: number;
        mime_type?: string | null;
        upload_id: string;
        uploaded_file_parts: MultipartUploadPart.Raw[];
    }
}
