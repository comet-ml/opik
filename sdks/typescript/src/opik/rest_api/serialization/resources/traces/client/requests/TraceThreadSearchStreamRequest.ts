/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as OpikApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { TraceThreadFilter } from "../../../../types/TraceThreadFilter";

export const TraceThreadSearchStreamRequest: core.serialization.Schema<
    serializers.TraceThreadSearchStreamRequest.Raw,
    OpikApi.TraceThreadSearchStreamRequest
> = core.serialization.object({
    projectName: core.serialization.property("project_name", core.serialization.string().optional()),
    projectId: core.serialization.property("project_id", core.serialization.string().optional()),
    filters: core.serialization.list(TraceThreadFilter).optional(),
    lastRetrievedThreadModelId: core.serialization.property(
        "last_retrieved_thread_model_id",
        core.serialization.string().optional(),
    ),
    limit: core.serialization.number().optional(),
    truncate: core.serialization.boolean().optional(),
});

export declare namespace TraceThreadSearchStreamRequest {
    export interface Raw {
        project_name?: string | null;
        project_id?: string | null;
        filters?: TraceThreadFilter.Raw[] | null;
        last_retrieved_thread_model_id?: string | null;
        limit?: number | null;
        truncate?: boolean | null;
    }
}
