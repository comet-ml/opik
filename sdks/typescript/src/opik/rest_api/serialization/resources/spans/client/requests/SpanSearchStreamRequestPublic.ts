/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as OpikApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { SpanSearchStreamRequestPublicType } from "../../types/SpanSearchStreamRequestPublicType";
import { SpanFilterPublic } from "../../../../types/SpanFilterPublic";

export const SpanSearchStreamRequestPublic: core.serialization.Schema<
    serializers.SpanSearchStreamRequestPublic.Raw,
    OpikApi.SpanSearchStreamRequestPublic
> = core.serialization.object({
    traceId: core.serialization.property("trace_id", core.serialization.string().optional()),
    projectName: core.serialization.property("project_name", core.serialization.string().optional()),
    projectId: core.serialization.property("project_id", core.serialization.string().optional()),
    type: SpanSearchStreamRequestPublicType.optional(),
    filters: core.serialization.list(SpanFilterPublic).optional(),
    limit: core.serialization.number().optional(),
    lastRetrievedId: core.serialization.property("last_retrieved_id", core.serialization.string().optional()),
    truncate: core.serialization.boolean().optional(),
});

export declare namespace SpanSearchStreamRequestPublic {
    export interface Raw {
        trace_id?: string | null;
        project_name?: string | null;
        project_id?: string | null;
        type?: SpanSearchStreamRequestPublicType.Raw | null;
        filters?: SpanFilterPublic.Raw[] | null;
        limit?: number | null;
        last_retrieved_id?: string | null;
        truncate?: boolean | null;
    }
}
