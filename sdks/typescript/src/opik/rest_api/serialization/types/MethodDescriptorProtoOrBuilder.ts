/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ByteString } from "./ByteString";

export const MethodDescriptorProtoOrBuilder: core.serialization.ObjectSchema<
    serializers.MethodDescriptorProtoOrBuilder.Raw,
    OpikApi.MethodDescriptorProtoOrBuilder
> = core.serialization.object({
    name: core.serialization.string().optional(),
    optionsOrBuilder: core.serialization.lazyObject(() => serializers.MethodOptionsOrBuilder).optional(),
    clientStreaming: core.serialization.boolean().optional(),
    serverStreaming: core.serialization.boolean().optional(),
    inputTypeBytes: ByteString.optional(),
    outputTypeBytes: ByteString.optional(),
    nameBytes: ByteString.optional(),
    outputType: core.serialization.string().optional(),
    inputType: core.serialization.string().optional(),
    options: core.serialization.lazyObject(() => serializers.MethodOptions).optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace MethodDescriptorProtoOrBuilder {
    export interface Raw {
        name?: string | null;
        optionsOrBuilder?: serializers.MethodOptionsOrBuilder.Raw | null;
        clientStreaming?: boolean | null;
        serverStreaming?: boolean | null;
        inputTypeBytes?: ByteString.Raw | null;
        outputTypeBytes?: ByteString.Raw | null;
        nameBytes?: ByteString.Raw | null;
        outputType?: string | null;
        inputType?: string | null;
        options?: serializers.MethodOptions.Raw | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
