/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ByteString } from "./ByteString";
import { ParserDeclaration } from "./ParserDeclaration";

export const Declaration: core.serialization.ObjectSchema<serializers.Declaration.Raw, OpikApi.Declaration> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        type: core.serialization.string().optional(),
        number: core.serialization.number().optional(),
        fullName: core.serialization.string().optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.Declaration).optional(),
        fullNameBytes: ByteString.optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserDeclaration.optional(),
        repeated: core.serialization.boolean().optional(),
        typeBytes: ByteString.optional(),
        reserved: core.serialization.boolean().optional(),
        initialized: core.serialization.boolean().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace Declaration {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        type?: string | null;
        number?: number | null;
        fullName?: string | null;
        defaultInstanceForType?: serializers.Declaration.Raw | null;
        fullNameBytes?: ByteString.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserDeclaration.Raw | null;
        repeated?: boolean | null;
        typeBytes?: ByteString.Raw | null;
        reserved?: boolean | null;
        initialized?: boolean | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
