/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { JsonNodePublic } from "./JsonNodePublic";
import { ExperimentPublicType } from "./ExperimentPublicType";
import { FeedbackScoreAveragePublic } from "./FeedbackScoreAveragePublic";
import { CommentPublic } from "./CommentPublic";
import { PercentageValuesPublic } from "./PercentageValuesPublic";
import { PromptVersionLinkPublic } from "./PromptVersionLinkPublic";

export const ExperimentPublic: core.serialization.ObjectSchema<
    serializers.ExperimentPublic.Raw,
    OpikApi.ExperimentPublic
> = core.serialization.object({
    id: core.serialization.string().optional(),
    datasetName: core.serialization.property("dataset_name", core.serialization.string()),
    datasetId: core.serialization.property("dataset_id", core.serialization.string().optional()),
    name: core.serialization.string().optional(),
    metadata: JsonNodePublic.optional(),
    type: ExperimentPublicType.optional(),
    optimizationId: core.serialization.property("optimization_id", core.serialization.string().optional()),
    feedbackScores: core.serialization.property(
        "feedback_scores",
        core.serialization.list(FeedbackScoreAveragePublic).optional(),
    ),
    comments: core.serialization.list(CommentPublic).optional(),
    traceCount: core.serialization.property("trace_count", core.serialization.number().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    duration: PercentageValuesPublic.optional(),
    totalEstimatedCost: core.serialization.property("total_estimated_cost", core.serialization.number().optional()),
    usage: core.serialization.record(core.serialization.string(), core.serialization.number()).optional(),
    lastUpdatedAt: core.serialization.property("last_updated_at", core.serialization.date().optional()),
    createdBy: core.serialization.property("created_by", core.serialization.string().optional()),
    lastUpdatedBy: core.serialization.property("last_updated_by", core.serialization.string().optional()),
    promptVersion: core.serialization.property("prompt_version", PromptVersionLinkPublic.optional()),
    promptVersions: core.serialization.property(
        "prompt_versions",
        core.serialization.list(PromptVersionLinkPublic).optional(),
    ),
});

export declare namespace ExperimentPublic {
    export interface Raw {
        id?: string | null;
        dataset_name: string;
        dataset_id?: string | null;
        name?: string | null;
        metadata?: JsonNodePublic.Raw | null;
        type?: ExperimentPublicType.Raw | null;
        optimization_id?: string | null;
        feedback_scores?: FeedbackScoreAveragePublic.Raw[] | null;
        comments?: CommentPublic.Raw[] | null;
        trace_count?: number | null;
        created_at?: string | null;
        duration?: PercentageValuesPublic.Raw | null;
        total_estimated_cost?: number | null;
        usage?: Record<string, number> | null;
        last_updated_at?: string | null;
        created_by?: string | null;
        last_updated_by?: string | null;
        prompt_version?: PromptVersionLinkPublic.Raw | null;
        prompt_versions?: PromptVersionLinkPublic.Raw[] | null;
    }
}
