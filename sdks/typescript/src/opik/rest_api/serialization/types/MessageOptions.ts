/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ParserMessageOptions } from "./ParserMessageOptions";

export const MessageOptions: core.serialization.ObjectSchema<serializers.MessageOptions.Raw, OpikApi.MessageOptions> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.MessageOptions).optional(),
        messageSetWireFormat: core.serialization.boolean().optional(),
        uninterpretedOptionCount: core.serialization.number().optional(),
        uninterpretedOptionList: core.serialization
            .list(core.serialization.lazyObject(() => serializers.UninterpretedOption))
            .optional(),
        noStandardDescriptorAccessor: core.serialization.boolean().optional(),
        deprecatedLegacyJsonFieldConflicts: core.serialization.boolean().optional(),
        uninterpretedOptionOrBuilderList: core.serialization
            .list(core.serialization.lazyObject(() => serializers.UninterpretedOptionOrBuilder))
            .optional(),
        featuresOrBuilder: core.serialization.lazyObject(() => serializers.FeatureSetOrBuilder).optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserMessageOptions.optional(),
        mapEntry: core.serialization.boolean().optional(),
        features: core.serialization.lazyObject(() => serializers.FeatureSet).optional(),
        initialized: core.serialization.boolean().optional(),
        deprecated: core.serialization.boolean().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        allFieldsRaw: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace MessageOptions {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        defaultInstanceForType?: serializers.MessageOptions.Raw | null;
        messageSetWireFormat?: boolean | null;
        uninterpretedOptionCount?: number | null;
        uninterpretedOptionList?: serializers.UninterpretedOption.Raw[] | null;
        noStandardDescriptorAccessor?: boolean | null;
        deprecatedLegacyJsonFieldConflicts?: boolean | null;
        uninterpretedOptionOrBuilderList?: serializers.UninterpretedOptionOrBuilder.Raw[] | null;
        featuresOrBuilder?: serializers.FeatureSetOrBuilder.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserMessageOptions.Raw | null;
        mapEntry?: boolean | null;
        features?: serializers.FeatureSet.Raw | null;
        initialized?: boolean | null;
        deprecated?: boolean | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        allFieldsRaw?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
