/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import { NumericalFeedbackDefinitionCreate } from "./NumericalFeedbackDefinitionCreate";
import { CategoricalFeedbackDefinitionCreate } from "./CategoricalFeedbackDefinitionCreate";

const _Base = core.serialization.object({
    id: core.serialization.string().optional(),
    name: core.serialization.string(),
});
export const FeedbackCreate: core.serialization.Schema<serializers.FeedbackCreate.Raw, OpikApi.FeedbackCreate> =
    core.serialization
        .union("type", {
            numerical: NumericalFeedbackDefinitionCreate.extend(_Base),
            categorical: CategoricalFeedbackDefinitionCreate.extend(_Base),
        })
        .transform<OpikApi.FeedbackCreate>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace FeedbackCreate {
    type Raw = FeedbackCreate.Numerical | FeedbackCreate.Categorical;

    interface Numerical extends _Base, NumericalFeedbackDefinitionCreate.Raw {
        type: "numerical";
    }

    interface Categorical extends _Base, CategoricalFeedbackDefinitionCreate.Raw {
        type: "categorical";
    }

    interface _Base {
        id?: string | null;
        name: string;
    }
}
