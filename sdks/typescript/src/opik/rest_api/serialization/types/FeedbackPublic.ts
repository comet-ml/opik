/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import { NumericalFeedbackDefinitionPublic } from "./NumericalFeedbackDefinitionPublic";
import { CategoricalFeedbackDefinitionPublic } from "./CategoricalFeedbackDefinitionPublic";

const _Base = core.serialization.object({
    id: core.serialization.string().optional(),
    name: core.serialization.string(),
    createdAt: core.serialization.date().optional(),
    createdBy: core.serialization.string().optional(),
    lastUpdatedAt: core.serialization.date().optional(),
    lastUpdatedBy: core.serialization.string().optional(),
});
export const FeedbackPublic: core.serialization.Schema<serializers.FeedbackPublic.Raw, OpikApi.FeedbackPublic> =
    core.serialization
        .union("type", {
            numerical: NumericalFeedbackDefinitionPublic.extend(_Base),
            categorical: CategoricalFeedbackDefinitionPublic.extend(_Base),
        })
        .transform<OpikApi.FeedbackPublic>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace FeedbackPublic {
    type Raw = FeedbackPublic.Numerical | FeedbackPublic.Categorical;

    interface Numerical extends _Base, NumericalFeedbackDefinitionPublic.Raw {
        type: "numerical";
    }

    interface Categorical extends _Base, CategoricalFeedbackDefinitionPublic.Raw {
        type: "categorical";
    }

    interface _Base {
        id?: string | null;
        name: string;
        createdAt?: string | null;
        createdBy?: string | null;
        lastUpdatedAt?: string | null;
        lastUpdatedBy?: string | null;
    }
}
