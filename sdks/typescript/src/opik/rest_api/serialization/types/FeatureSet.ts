/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { FeatureSetRepeatedFieldEncoding } from "./FeatureSetRepeatedFieldEncoding";
import { FeatureSetEnforceNamingStyle } from "./FeatureSetEnforceNamingStyle";
import { FeatureSetMessageEncoding } from "./FeatureSetMessageEncoding";
import { FeatureSetUtf8Validation } from "./FeatureSetUtf8Validation";
import { FeatureSetFieldPresence } from "./FeatureSetFieldPresence";
import { ParserFeatureSet } from "./ParserFeatureSet";
import { FeatureSetJsonFormat } from "./FeatureSetJsonFormat";
import { FeatureSetEnumType } from "./FeatureSetEnumType";

export const FeatureSet: core.serialization.ObjectSchema<serializers.FeatureSet.Raw, OpikApi.FeatureSet> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.FeatureSet).optional(),
        repeatedFieldEncoding: FeatureSetRepeatedFieldEncoding.optional(),
        enforceNamingStyle: FeatureSetEnforceNamingStyle.optional(),
        messageEncoding: FeatureSetMessageEncoding.optional(),
        utf8Validation: FeatureSetUtf8Validation.optional(),
        fieldPresence: FeatureSetFieldPresence.optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserFeatureSet.optional(),
        jsonFormat: FeatureSetJsonFormat.optional(),
        enumType: FeatureSetEnumType.optional(),
        initialized: core.serialization.boolean().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        allFieldsRaw: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace FeatureSet {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        defaultInstanceForType?: serializers.FeatureSet.Raw | null;
        repeatedFieldEncoding?: FeatureSetRepeatedFieldEncoding.Raw | null;
        enforceNamingStyle?: FeatureSetEnforceNamingStyle.Raw | null;
        messageEncoding?: FeatureSetMessageEncoding.Raw | null;
        utf8Validation?: FeatureSetUtf8Validation.Raw | null;
        fieldPresence?: FeatureSetFieldPresence.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserFeatureSet.Raw | null;
        jsonFormat?: FeatureSetJsonFormat.Raw | null;
        enumType?: FeatureSetEnumType.Raw | null;
        initialized?: boolean | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        allFieldsRaw?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
