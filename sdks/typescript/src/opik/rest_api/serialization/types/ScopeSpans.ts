/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { InstrumentationScopeOrBuilder } from "./InstrumentationScopeOrBuilder";
import { SpanOrBuilder } from "./SpanOrBuilder";
import { ByteString } from "./ByteString";
import { ParserScopeSpans } from "./ParserScopeSpans";
import { Span } from "./Span";

export const ScopeSpans: core.serialization.ObjectSchema<serializers.ScopeSpans.Raw, OpikApi.ScopeSpans> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        scope: core.serialization.lazyObject(() => serializers.InstrumentationScope).optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.ScopeSpans).optional(),
        scopeOrBuilder: InstrumentationScopeOrBuilder.optional(),
        spansOrBuilderList: core.serialization.list(SpanOrBuilder).optional(),
        schemaUrlBytes: ByteString.optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserScopeSpans.optional(),
        spansList: core.serialization.list(Span).optional(),
        spansCount: core.serialization.number().optional(),
        schemaUrl: core.serialization.string().optional(),
        initialized: core.serialization.boolean().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace ScopeSpans {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        scope?: serializers.InstrumentationScope.Raw | null;
        defaultInstanceForType?: serializers.ScopeSpans.Raw | null;
        scopeOrBuilder?: InstrumentationScopeOrBuilder.Raw | null;
        spansOrBuilderList?: SpanOrBuilder.Raw[] | null;
        schemaUrlBytes?: ByteString.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserScopeSpans.Raw | null;
        spansList?: Span.Raw[] | null;
        spansCount?: number | null;
        schemaUrl?: string | null;
        initialized?: boolean | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
