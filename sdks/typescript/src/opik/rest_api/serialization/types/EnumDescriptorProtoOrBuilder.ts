/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ByteString } from "./ByteString";

export const EnumDescriptorProtoOrBuilder: core.serialization.ObjectSchema<
    serializers.EnumDescriptorProtoOrBuilder.Raw,
    OpikApi.EnumDescriptorProtoOrBuilder
> = core.serialization.object({
    name: core.serialization.string().optional(),
    reservedRangeOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.EnumReservedRangeOrBuilder))
        .optional(),
    reservedRangeCount: core.serialization.number().optional(),
    reservedNameCount: core.serialization.number().optional(),
    optionsOrBuilder: core.serialization.lazyObject(() => serializers.EnumOptionsOrBuilder).optional(),
    reservedRangeList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.EnumReservedRange))
        .optional(),
    reservedNameList: core.serialization.list(core.serialization.string()).optional(),
    valueOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.EnumValueDescriptorProtoOrBuilder))
        .optional(),
    valueList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.EnumValueDescriptorProto))
        .optional(),
    valueCount: core.serialization.number().optional(),
    nameBytes: ByteString.optional(),
    options: core.serialization.lazyObject(() => serializers.EnumOptions).optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace EnumDescriptorProtoOrBuilder {
    export interface Raw {
        name?: string | null;
        reservedRangeOrBuilderList?: serializers.EnumReservedRangeOrBuilder.Raw[] | null;
        reservedRangeCount?: number | null;
        reservedNameCount?: number | null;
        optionsOrBuilder?: serializers.EnumOptionsOrBuilder.Raw | null;
        reservedRangeList?: serializers.EnumReservedRange.Raw[] | null;
        reservedNameList?: string[] | null;
        valueOrBuilderList?: serializers.EnumValueDescriptorProtoOrBuilder.Raw[] | null;
        valueList?: serializers.EnumValueDescriptorProto.Raw[] | null;
        valueCount?: number | null;
        nameBytes?: ByteString.Raw | null;
        options?: serializers.EnumOptions.Raw | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
