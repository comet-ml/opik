/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { FieldDescriptorType } from "./FieldDescriptorType";
import { FieldDescriptorLiteJavaType } from "./FieldDescriptorLiteJavaType";
import { FieldDescriptorJavaType } from "./FieldDescriptorJavaType";
import { FieldDescriptorLiteType } from "./FieldDescriptorLiteType";

export const FieldDescriptor: core.serialization.ObjectSchema<
    serializers.FieldDescriptor.Raw,
    OpikApi.FieldDescriptor
> = core.serialization.object({
    index: core.serialization.number().optional(),
    proto: core.serialization.lazyObject(() => serializers.FieldDescriptorProto).optional(),
    options: core.serialization.lazyObject(() => serializers.FieldOptions).optional(),
    fullName: core.serialization.string().optional(),
    jsonName: core.serialization.string().optional(),
    file: core.serialization.lazyObject(() => serializers.FileDescriptor).optional(),
    extensionScope: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    type: FieldDescriptorType.optional(),
    containingType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    messageType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    containingOneof: core.serialization.lazyObject(() => serializers.OneofDescriptor).optional(),
    enumType: core.serialization.lazyObject(() => serializers.EnumDescriptor).optional(),
    defaultValue: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    name: core.serialization.string().optional(),
    number: core.serialization.number().optional(),
    liteJavaType: FieldDescriptorLiteJavaType.optional(),
    realContainingOneof: core.serialization.lazyObject(() => serializers.OneofDescriptor).optional(),
    javaType: FieldDescriptorJavaType.optional(),
    mapField: core.serialization.boolean().optional(),
    extension: core.serialization.boolean().optional(),
    liteType: FieldDescriptorLiteType.optional(),
    packable: core.serialization.boolean().optional(),
    packed: core.serialization.boolean().optional(),
    required: core.serialization.boolean().optional(),
    optional: core.serialization.boolean().optional(),
    repeated: core.serialization.boolean().optional(),
});

export declare namespace FieldDescriptor {
    export interface Raw {
        index?: number | null;
        proto?: serializers.FieldDescriptorProto.Raw | null;
        options?: serializers.FieldOptions.Raw | null;
        fullName?: string | null;
        jsonName?: string | null;
        file?: serializers.FileDescriptor.Raw | null;
        extensionScope?: serializers.Descriptor.Raw | null;
        type?: FieldDescriptorType.Raw | null;
        containingType?: serializers.Descriptor.Raw | null;
        messageType?: serializers.Descriptor.Raw | null;
        containingOneof?: serializers.OneofDescriptor.Raw | null;
        enumType?: serializers.EnumDescriptor.Raw | null;
        defaultValue?: Record<string, unknown> | null;
        name?: string | null;
        number?: number | null;
        liteJavaType?: FieldDescriptorLiteJavaType.Raw | null;
        realContainingOneof?: serializers.OneofDescriptor.Raw | null;
        javaType?: FieldDescriptorJavaType.Raw | null;
        mapField?: boolean | null;
        extension?: boolean | null;
        liteType?: FieldDescriptorLiteType.Raw | null;
        packable?: boolean | null;
        packed?: boolean | null;
        required?: boolean | null;
        optional?: boolean | null;
        repeated?: boolean | null;
    }
}
