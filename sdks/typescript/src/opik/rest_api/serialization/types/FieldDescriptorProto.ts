/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { FieldDescriptorProtoType } from "./FieldDescriptorProtoType";
import { FieldDescriptorProtoLabel } from "./FieldDescriptorProtoLabel";
import { ByteString } from "./ByteString";
import { ParserFieldDescriptorProto } from "./ParserFieldDescriptorProto";

export const FieldDescriptorProto: core.serialization.ObjectSchema<
    serializers.FieldDescriptorProto.Raw,
    OpikApi.FieldDescriptorProto
> = core.serialization.object({
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    name: core.serialization.string().optional(),
    typeName: core.serialization.string().optional(),
    type: FieldDescriptorProtoType.optional(),
    defaultValue: core.serialization.string().optional(),
    number: core.serialization.number().optional(),
    label: FieldDescriptorProtoLabel.optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.FieldDescriptorProto).optional(),
    optionsOrBuilder: core.serialization.lazyObject(() => serializers.FieldOptionsOrBuilder).optional(),
    proto3Optional: core.serialization.boolean().optional(),
    typeNameBytes: ByteString.optional(),
    extendeeBytes: ByteString.optional(),
    defaultValueBytes: ByteString.optional(),
    jsonNameBytes: ByteString.optional(),
    serializedSize: core.serialization.number().optional(),
    parserForType: ParserFieldDescriptorProto.optional(),
    jsonName: core.serialization.string().optional(),
    oneofIndex: core.serialization.number().optional(),
    extendee: core.serialization.string().optional(),
    nameBytes: ByteString.optional(),
    initialized: core.serialization.boolean().optional(),
    options: core.serialization.lazyObject(() => serializers.FieldOptions).optional(),
    initializationErrorString: core.serialization.string().optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    memoizedSerializedSize: core.serialization.number().optional(),
});

export declare namespace FieldDescriptorProto {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        name?: string | null;
        typeName?: string | null;
        type?: FieldDescriptorProtoType.Raw | null;
        defaultValue?: string | null;
        number?: number | null;
        label?: FieldDescriptorProtoLabel.Raw | null;
        defaultInstanceForType?: serializers.FieldDescriptorProto.Raw | null;
        optionsOrBuilder?: serializers.FieldOptionsOrBuilder.Raw | null;
        proto3Optional?: boolean | null;
        typeNameBytes?: ByteString.Raw | null;
        extendeeBytes?: ByteString.Raw | null;
        defaultValueBytes?: ByteString.Raw | null;
        jsonNameBytes?: ByteString.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserFieldDescriptorProto.Raw | null;
        jsonName?: string | null;
        oneofIndex?: number | null;
        extendee?: string | null;
        nameBytes?: ByteString.Raw | null;
        initialized?: boolean | null;
        options?: serializers.FieldOptions.Raw | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
