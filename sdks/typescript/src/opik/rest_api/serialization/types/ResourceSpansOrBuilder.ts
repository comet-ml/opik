/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ScopeSpansOrBuilder } from "./ScopeSpansOrBuilder";
import { ResourceOrBuilder } from "./ResourceOrBuilder";
import { ByteString } from "./ByteString";

export const ResourceSpansOrBuilder: core.serialization.ObjectSchema<
    serializers.ResourceSpansOrBuilder.Raw,
    OpikApi.ResourceSpansOrBuilder
> = core.serialization.object({
    resource: core.serialization.lazyObject(() => serializers.Resource).optional(),
    scopeSpansOrBuilderList: core.serialization.list(ScopeSpansOrBuilder).optional(),
    resourceOrBuilder: ResourceOrBuilder.optional(),
    scopeSpansList: core.serialization.list(core.serialization.lazyObject(() => serializers.ScopeSpans)).optional(),
    scopeSpansCount: core.serialization.number().optional(),
    schemaUrlBytes: ByteString.optional(),
    schemaUrl: core.serialization.string().optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace ResourceSpansOrBuilder {
    export interface Raw {
        resource?: serializers.Resource.Raw | null;
        scopeSpansOrBuilderList?: ScopeSpansOrBuilder.Raw[] | null;
        resourceOrBuilder?: ResourceOrBuilder.Raw | null;
        scopeSpansList?: serializers.ScopeSpans.Raw[] | null;
        scopeSpansCount?: number | null;
        schemaUrlBytes?: ByteString.Raw | null;
        schemaUrl?: string | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
