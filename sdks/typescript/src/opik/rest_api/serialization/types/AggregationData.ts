/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { PercentageValues } from "./PercentageValues";
import { FeedbackScoreAverage } from "./FeedbackScoreAverage";

export const AggregationData: core.serialization.ObjectSchema<
    serializers.AggregationData.Raw,
    OpikApi.AggregationData
> = core.serialization.object({
    experimentCount: core.serialization.property("experiment_count", core.serialization.number().optional()),
    traceCount: core.serialization.property("trace_count", core.serialization.number().optional()),
    totalEstimatedCost: core.serialization.property("total_estimated_cost", core.serialization.number().optional()),
    totalEstimatedCostAvg: core.serialization.property(
        "total_estimated_cost_avg",
        core.serialization.number().optional(),
    ),
    duration: PercentageValues.optional(),
    feedbackScores: core.serialization.property(
        "feedback_scores",
        core.serialization.list(FeedbackScoreAverage).optional(),
    ),
});

export declare namespace AggregationData {
    export interface Raw {
        experiment_count?: number | null;
        trace_count?: number | null;
        total_estimated_cost?: number | null;
        total_estimated_cost_avg?: number | null;
        duration?: PercentageValues.Raw | null;
        feedback_scores?: FeedbackScoreAverage.Raw[] | null;
    }
}
