/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { SpanPublicType } from "./SpanPublicType";
import { JsonNodePublic } from "./JsonNodePublic";
import { ErrorInfoPublic } from "./ErrorInfoPublic";
import { FeedbackScorePublic } from "./FeedbackScorePublic";
import { CommentPublic } from "./CommentPublic";

export const SpanPublic: core.serialization.ObjectSchema<serializers.SpanPublic.Raw, OpikApi.SpanPublic> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        projectId: core.serialization.property("project_id", core.serialization.string().optional()),
        traceId: core.serialization.property("trace_id", core.serialization.string()),
        parentSpanId: core.serialization.property("parent_span_id", core.serialization.string().optional()),
        name: core.serialization.string(),
        type: SpanPublicType,
        startTime: core.serialization.property("start_time", core.serialization.date()),
        endTime: core.serialization.property("end_time", core.serialization.date().optional()),
        input: JsonNodePublic.optional(),
        output: JsonNodePublic.optional(),
        metadata: JsonNodePublic.optional(),
        model: core.serialization.string().optional(),
        provider: core.serialization.string().optional(),
        tags: core.serialization.list(core.serialization.string()).optional(),
        usage: core.serialization.record(core.serialization.string(), core.serialization.number()).optional(),
        errorInfo: core.serialization.property("error_info", ErrorInfoPublic.optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        lastUpdatedAt: core.serialization.property("last_updated_at", core.serialization.date().optional()),
        createdBy: core.serialization.property("created_by", core.serialization.string().optional()),
        lastUpdatedBy: core.serialization.property("last_updated_by", core.serialization.string().optional()),
        feedbackScores: core.serialization.property(
            "feedback_scores",
            core.serialization.list(FeedbackScorePublic).optional()
        ),
        comments: core.serialization.list(CommentPublic).optional(),
        totalEstimatedCost: core.serialization.property("total_estimated_cost", core.serialization.number().optional()),
        totalEstimatedCostVersion: core.serialization.property(
            "total_estimated_cost_version",
            core.serialization.string().optional()
        ),
        duration: core.serialization.number().optional(),
    });

export declare namespace SpanPublic {
    interface Raw {
        id?: string | null;
        project_id?: string | null;
        trace_id: string;
        parent_span_id?: string | null;
        name: string;
        type: SpanPublicType.Raw;
        start_time: string;
        end_time?: string | null;
        input?: JsonNodePublic.Raw | null;
        output?: JsonNodePublic.Raw | null;
        metadata?: JsonNodePublic.Raw | null;
        model?: string | null;
        provider?: string | null;
        tags?: string[] | null;
        usage?: Record<string, number> | null;
        error_info?: ErrorInfoPublic.Raw | null;
        created_at?: string | null;
        last_updated_at?: string | null;
        created_by?: string | null;
        last_updated_by?: string | null;
        feedback_scores?: FeedbackScorePublic.Raw[] | null;
        comments?: CommentPublic.Raw[] | null;
        total_estimated_cost?: number | null;
        total_estimated_cost_version?: string | null;
        duration?: number | null;
    }
}
