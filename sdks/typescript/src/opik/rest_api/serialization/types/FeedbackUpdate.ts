/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import { NumericalFeedbackDefinitionUpdate } from "./NumericalFeedbackDefinitionUpdate";
import { CategoricalFeedbackDefinitionUpdate } from "./CategoricalFeedbackDefinitionUpdate";

const _Base = core.serialization.object({
    id: core.serialization.string().optional(),
    name: core.serialization.string(),
});
export const FeedbackUpdate: core.serialization.Schema<serializers.FeedbackUpdate.Raw, OpikApi.FeedbackUpdate> =
    core.serialization
        .union("type", {
            numerical: NumericalFeedbackDefinitionUpdate.extend(_Base),
            categorical: CategoricalFeedbackDefinitionUpdate.extend(_Base),
        })
        .transform<OpikApi.FeedbackUpdate>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace FeedbackUpdate {
    export type Raw = FeedbackUpdate.Numerical | FeedbackUpdate.Categorical;

    export interface Numerical extends _Base, NumericalFeedbackDefinitionUpdate.Raw {
        type: "numerical";
    }

    export interface Categorical extends _Base, CategoricalFeedbackDefinitionUpdate.Raw {
        type: "categorical";
    }

    export interface _Base {
        id?: string | null;
        name: string;
    }
}
