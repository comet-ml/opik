/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ByteString } from "./ByteString";
import { ParserAnyValue } from "./ParserAnyValue";
import { AnyValueValueCase } from "./AnyValueValueCase";

export const AnyValue: core.serialization.ObjectSchema<serializers.AnyValue.Raw, OpikApi.AnyValue> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.AnyValue).optional(),
        kvlistValueOrBuilder: core.serialization.lazyObject(() => serializers.KeyValueListOrBuilder).optional(),
        stringValueBytes: ByteString.optional(),
        arrayValueOrBuilder: core.serialization.lazyObject(() => serializers.ArrayValueOrBuilder).optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserAnyValue.optional(),
        intValue: core.serialization.number().optional(),
        valueCase: AnyValueValueCase.optional(),
        boolValue: core.serialization.boolean().optional(),
        arrayValue: core.serialization.lazyObject(() => serializers.ArrayValue).optional(),
        kvlistValue: core.serialization.lazyObject(() => serializers.KeyValueList).optional(),
        bytesValue: ByteString.optional(),
        doubleValue: core.serialization.number().optional(),
        initialized: core.serialization.boolean().optional(),
        stringValue: core.serialization.string().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace AnyValue {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        defaultInstanceForType?: serializers.AnyValue.Raw | null;
        kvlistValueOrBuilder?: serializers.KeyValueListOrBuilder.Raw | null;
        stringValueBytes?: ByteString.Raw | null;
        arrayValueOrBuilder?: serializers.ArrayValueOrBuilder.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserAnyValue.Raw | null;
        intValue?: number | null;
        valueCase?: AnyValueValueCase.Raw | null;
        boolValue?: boolean | null;
        arrayValue?: serializers.ArrayValue.Raw | null;
        kvlistValue?: serializers.KeyValueList.Raw | null;
        bytesValue?: ByteString.Raw | null;
        doubleValue?: number | null;
        initialized?: boolean | null;
        stringValue?: string | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
