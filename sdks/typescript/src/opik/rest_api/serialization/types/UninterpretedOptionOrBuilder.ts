/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ByteString } from "./ByteString";

export const UninterpretedOptionOrBuilder: core.serialization.ObjectSchema<
    serializers.UninterpretedOptionOrBuilder.Raw,
    OpikApi.UninterpretedOptionOrBuilder
> = core.serialization.object({
    nameCount: core.serialization.number().optional(),
    identifierValueBytes: ByteString.optional(),
    nameOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.NamePartOrBuilder))
        .optional(),
    identifierValue: core.serialization.string().optional(),
    positiveIntValue: core.serialization.number().optional(),
    negativeIntValue: core.serialization.number().optional(),
    aggregateValue: core.serialization.string().optional(),
    aggregateValueBytes: ByteString.optional(),
    nameList: core.serialization.list(core.serialization.lazyObject(() => serializers.NamePart)).optional(),
    doubleValue: core.serialization.number().optional(),
    stringValue: ByteString.optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace UninterpretedOptionOrBuilder {
    export interface Raw {
        nameCount?: number | null;
        identifierValueBytes?: ByteString.Raw | null;
        nameOrBuilderList?: serializers.NamePartOrBuilder.Raw[] | null;
        identifierValue?: string | null;
        positiveIntValue?: number | null;
        negativeIntValue?: number | null;
        aggregateValue?: string | null;
        aggregateValueBytes?: ByteString.Raw | null;
        nameList?: serializers.NamePart.Raw[] | null;
        doubleValue?: number | null;
        stringValue?: ByteString.Raw | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
