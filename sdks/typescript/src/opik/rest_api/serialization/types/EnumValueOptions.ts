/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ParserEnumValueOptions } from "./ParserEnumValueOptions";

export const EnumValueOptions: core.serialization.ObjectSchema<
    serializers.EnumValueOptions.Raw,
    OpikApi.EnumValueOptions
> = core.serialization.object({
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.EnumValueOptions).optional(),
    uninterpretedOptionCount: core.serialization.number().optional(),
    uninterpretedOptionList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.UninterpretedOption))
        .optional(),
    featureSupportOrBuilder: core.serialization.lazyObject(() => serializers.FeatureSupportOrBuilder).optional(),
    uninterpretedOptionOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.UninterpretedOptionOrBuilder))
        .optional(),
    featuresOrBuilder: core.serialization.lazyObject(() => serializers.FeatureSetOrBuilder).optional(),
    featureSupport: core.serialization.lazyObject(() => serializers.FeatureSupport).optional(),
    serializedSize: core.serialization.number().optional(),
    parserForType: ParserEnumValueOptions.optional(),
    debugRedact: core.serialization.boolean().optional(),
    features: core.serialization.lazyObject(() => serializers.FeatureSet).optional(),
    initialized: core.serialization.boolean().optional(),
    deprecated: core.serialization.boolean().optional(),
    allFieldsRaw: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initializationErrorString: core.serialization.string().optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    memoizedSerializedSize: core.serialization.number().optional(),
});

export declare namespace EnumValueOptions {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        defaultInstanceForType?: serializers.EnumValueOptions.Raw | null;
        uninterpretedOptionCount?: number | null;
        uninterpretedOptionList?: serializers.UninterpretedOption.Raw[] | null;
        featureSupportOrBuilder?: serializers.FeatureSupportOrBuilder.Raw | null;
        uninterpretedOptionOrBuilderList?: serializers.UninterpretedOptionOrBuilder.Raw[] | null;
        featuresOrBuilder?: serializers.FeatureSetOrBuilder.Raw | null;
        featureSupport?: serializers.FeatureSupport.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserEnumValueOptions.Raw | null;
        debugRedact?: boolean | null;
        features?: serializers.FeatureSet.Raw | null;
        initialized?: boolean | null;
        deprecated?: boolean | null;
        allFieldsRaw?: Record<string, Record<string, unknown>> | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        memoizedSerializedSize?: number | null;
    }
}
