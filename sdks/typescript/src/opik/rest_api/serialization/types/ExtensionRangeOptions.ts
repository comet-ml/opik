/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ExtensionRangeOptionsVerification } from "./ExtensionRangeOptionsVerification";
import { ParserExtensionRangeOptions } from "./ParserExtensionRangeOptions";

export const ExtensionRangeOptions: core.serialization.ObjectSchema<
    serializers.ExtensionRangeOptions.Raw,
    OpikApi.ExtensionRangeOptions
> = core.serialization.object({
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    declarationOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.DeclarationOrBuilder))
        .optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.ExtensionRangeOptions).optional(),
    uninterpretedOptionCount: core.serialization.number().optional(),
    uninterpretedOptionList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.UninterpretedOption))
        .optional(),
    uninterpretedOptionOrBuilderList: core.serialization
        .list(core.serialization.lazyObject(() => serializers.UninterpretedOptionOrBuilder))
        .optional(),
    featuresOrBuilder: core.serialization.lazyObject(() => serializers.FeatureSetOrBuilder).optional(),
    declarationList: core.serialization.list(core.serialization.lazyObject(() => serializers.Declaration)).optional(),
    declarationCount: core.serialization.number().optional(),
    verification: ExtensionRangeOptionsVerification.optional(),
    serializedSize: core.serialization.number().optional(),
    parserForType: ParserExtensionRangeOptions.optional(),
    features: core.serialization.lazyObject(() => serializers.FeatureSet).optional(),
    initialized: core.serialization.boolean().optional(),
    allFieldsRaw: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initializationErrorString: core.serialization.string().optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    memoizedSerializedSize: core.serialization.number().optional(),
});

export declare namespace ExtensionRangeOptions {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        declarationOrBuilderList?: serializers.DeclarationOrBuilder.Raw[] | null;
        defaultInstanceForType?: serializers.ExtensionRangeOptions.Raw | null;
        uninterpretedOptionCount?: number | null;
        uninterpretedOptionList?: serializers.UninterpretedOption.Raw[] | null;
        uninterpretedOptionOrBuilderList?: serializers.UninterpretedOptionOrBuilder.Raw[] | null;
        featuresOrBuilder?: serializers.FeatureSetOrBuilder.Raw | null;
        declarationList?: serializers.Declaration.Raw[] | null;
        declarationCount?: number | null;
        verification?: ExtensionRangeOptionsVerification.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserExtensionRangeOptions.Raw | null;
        features?: serializers.FeatureSet.Raw | null;
        initialized?: boolean | null;
        allFieldsRaw?: Record<string, Record<string, unknown>> | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        memoizedSerializedSize?: number | null;
    }
}
