/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";

export const Descriptor: core.serialization.ObjectSchema<serializers.Descriptor.Raw, OpikApi.Descriptor> =
    core.serialization.object({
        index: core.serialization.number().optional(),
        proto: core.serialization.lazyObject(() => serializers.DescriptorProto).optional(),
        options: core.serialization.lazyObject(() => serializers.MessageOptions).optional(),
        fullName: core.serialization.string().optional(),
        file: core.serialization.lazyObject(() => serializers.FileDescriptor).optional(),
        containingType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        nestedTypes: core.serialization.list(core.serialization.lazyObject(() => serializers.Descriptor)).optional(),
        enumTypes: core.serialization.list(core.serialization.lazyObject(() => serializers.EnumDescriptor)).optional(),
        fields: core.serialization.list(core.serialization.lazyObject(() => serializers.FieldDescriptor)).optional(),
        extensions: core.serialization
            .list(core.serialization.lazyObject(() => serializers.FieldDescriptor))
            .optional(),
        oneofs: core.serialization.list(core.serialization.lazyObject(() => serializers.OneofDescriptor)).optional(),
        name: core.serialization.string().optional(),
        extendable: core.serialization.boolean().optional(),
        realOneofs: core.serialization
            .list(core.serialization.lazyObject(() => serializers.OneofDescriptor))
            .optional(),
    });

export declare namespace Descriptor {
    export interface Raw {
        index?: number | null;
        proto?: serializers.DescriptorProto.Raw | null;
        options?: serializers.MessageOptions.Raw | null;
        fullName?: string | null;
        file?: serializers.FileDescriptor.Raw | null;
        containingType?: serializers.Descriptor.Raw | null;
        nestedTypes?: serializers.Descriptor.Raw[] | null;
        enumTypes?: serializers.EnumDescriptor.Raw[] | null;
        fields?: serializers.FieldDescriptor.Raw[] | null;
        extensions?: serializers.FieldDescriptor.Raw[] | null;
        oneofs?: serializers.OneofDescriptor.Raw[] | null;
        name?: string | null;
        extendable?: boolean | null;
        realOneofs?: serializers.OneofDescriptor.Raw[] | null;
    }
}
