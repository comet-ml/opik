/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { InstrumentationScopeOrBuilder } from "./InstrumentationScopeOrBuilder";
import { SpanOrBuilder } from "./SpanOrBuilder";
import { ByteString } from "./ByteString";
import { Span } from "./Span";

export const ScopeSpansOrBuilder: core.serialization.ObjectSchema<
    serializers.ScopeSpansOrBuilder.Raw,
    OpikApi.ScopeSpansOrBuilder
> = core.serialization.object({
    scope: core.serialization.lazyObject(() => serializers.InstrumentationScope).optional(),
    scopeOrBuilder: InstrumentationScopeOrBuilder.optional(),
    spansOrBuilderList: core.serialization.list(SpanOrBuilder).optional(),
    schemaUrlBytes: ByteString.optional(),
    spansList: core.serialization.list(Span).optional(),
    spansCount: core.serialization.number().optional(),
    schemaUrl: core.serialization.string().optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace ScopeSpansOrBuilder {
    export interface Raw {
        scope?: serializers.InstrumentationScope.Raw | null;
        scopeOrBuilder?: InstrumentationScopeOrBuilder.Raw | null;
        spansOrBuilderList?: SpanOrBuilder.Raw[] | null;
        schemaUrlBytes?: ByteString.Raw | null;
        spansList?: Span.Raw[] | null;
        spansCount?: number | null;
        schemaUrl?: string | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
