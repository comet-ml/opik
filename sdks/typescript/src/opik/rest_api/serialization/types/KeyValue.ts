/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { ParserKeyValue } from "./ParserKeyValue";
import { ByteString } from "./ByteString";

export const KeyValue: core.serialization.ObjectSchema<serializers.KeyValue.Raw, OpikApi.KeyValue> =
    core.serialization.object({
        unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
        value: core.serialization.lazyObject(() => serializers.AnyValue).optional(),
        key: core.serialization.string().optional(),
        defaultInstanceForType: core.serialization.lazyObject(() => serializers.KeyValue).optional(),
        valueOrBuilder: core.serialization.lazyObject(() => serializers.AnyValueOrBuilder).optional(),
        serializedSize: core.serialization.number().optional(),
        parserForType: ParserKeyValue.optional(),
        keyBytes: ByteString.optional(),
        initialized: core.serialization.boolean().optional(),
        initializationErrorString: core.serialization.string().optional(),
        descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
        allFields: core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(core.serialization.string(), core.serialization.unknown()),
            )
            .optional(),
        memoizedSerializedSize: core.serialization.number().optional(),
    });

export declare namespace KeyValue {
    export interface Raw {
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        value?: serializers.AnyValue.Raw | null;
        key?: string | null;
        defaultInstanceForType?: serializers.KeyValue.Raw | null;
        valueOrBuilder?: serializers.AnyValueOrBuilder.Raw | null;
        serializedSize?: number | null;
        parserForType?: ParserKeyValue.Raw | null;
        keyBytes?: ByteString.Raw | null;
        initialized?: boolean | null;
        initializationErrorString?: string | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        memoizedSerializedSize?: number | null;
    }
}
