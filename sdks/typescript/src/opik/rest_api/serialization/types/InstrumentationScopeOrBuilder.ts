/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpikApi from "../../api/index";
import * as core from "../../core";
import { KeyValueOrBuilder } from "./KeyValueOrBuilder";
import { ByteString } from "./ByteString";

export const InstrumentationScopeOrBuilder: core.serialization.ObjectSchema<
    serializers.InstrumentationScopeOrBuilder.Raw,
    OpikApi.InstrumentationScopeOrBuilder
> = core.serialization.object({
    name: core.serialization.string().optional(),
    version: core.serialization.string().optional(),
    droppedAttributesCount: core.serialization.number().optional(),
    attributesOrBuilderList: core.serialization.list(KeyValueOrBuilder).optional(),
    versionBytes: ByteString.optional(),
    attributesList: core.serialization.list(core.serialization.lazyObject(() => serializers.KeyValue)).optional(),
    attributesCount: core.serialization.number().optional(),
    nameBytes: ByteString.optional(),
    defaultInstanceForType: core.serialization.lazyObject(() => serializers.Message).optional(),
    initializationErrorString: core.serialization.string().optional(),
    unknownFields: core.serialization.lazyObject(() => serializers.UnknownFieldSet).optional(),
    descriptorForType: core.serialization.lazyObject(() => serializers.Descriptor).optional(),
    allFields: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        )
        .optional(),
    initialized: core.serialization.boolean().optional(),
});

export declare namespace InstrumentationScopeOrBuilder {
    export interface Raw {
        name?: string | null;
        version?: string | null;
        droppedAttributesCount?: number | null;
        attributesOrBuilderList?: KeyValueOrBuilder.Raw[] | null;
        versionBytes?: ByteString.Raw | null;
        attributesList?: serializers.KeyValue.Raw[] | null;
        attributesCount?: number | null;
        nameBytes?: ByteString.Raw | null;
        defaultInstanceForType?: serializers.Message.Raw | null;
        initializationErrorString?: string | null;
        unknownFields?: serializers.UnknownFieldSet.Raw | null;
        descriptorForType?: serializers.Descriptor.Raw | null;
        allFields?: Record<string, Record<string, unknown>> | null;
        initialized?: boolean | null;
    }
}
