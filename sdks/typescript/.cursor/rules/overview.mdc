---
globs: sdks/typescript/src/**/*.ts
description: High-level overview of the Opik TypeScript SDK and how to navigate it
alwaysApply: false
---

## Opik TypeScript SDK Overview

Create traces and spans, manage datasets and experiments, and integrate with LLM providers from Node.js/TypeScript. Writes are non-blocking and batched by default.

- Main entry point: [opik/index.ts](mdc:sdks/typescript/src/opik/index.ts)
- Primary class: `Opik` → [client/Client.ts](mdc:sdks/typescript/src/opik/client/Client.ts)
- Tracing: [Trace.ts](mdc:sdks/typescript/src/opik/tracer/Trace.ts), [Span.ts](mdc:sdks/typescript/src/opik/tracer/Span.ts)
- Datasets/Experiments: [dataset](mdc:sdks/typescript/src/opik/dataset/index.ts), [experiment](mdc:sdks/typescript/src/opik/experiment/index.ts)
- Batching queues: [client/BatchQueue.ts](mdc:sdks/typescript/src/opik/client/BatchQueue.ts)
- REST client & types: [rest_api](mdc:sdks/typescript/src/opik/rest_api/index.ts)
- Decorators: [decorators/track.ts](mdc:sdks/typescript/src/opik/decorators/track.ts)

### How it works

1) Instantiate `Opik` (alias of `OpikClient`). Config merges defaults, `~/.opik.config`, env vars, and explicit options.
2) Create traces/spans. Calls enqueue to batch queues; REST persists in the background.
3) Call `flush()` to force sending buffered items (e.g., short-lived scripts, serverless teardown), or `flushAll()` for all clients.

Key exports: `Opik`, `track`, `getTrackContext`, `generateId`, `flushAll`, logger helpers.

### Configuration precedence
Explicit options → env vars (`OPIK_*`) → `~/.opik.config` → defaults. See [Config.ts](mdc:sdks/typescript/src/opik/config/Config.ts).

### Batching model
Create/update/delete are queued with debounce and size thresholds. Updates wait for creates; deletes wait for both. See [BatchQueue.ts](mdc:sdks/typescript/src/opik/client/BatchQueue.ts).

### Compatibility
- Node.js >= 18
- Dual build: ESM and CJS

