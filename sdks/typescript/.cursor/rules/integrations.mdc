---
globs: sdks/typescript/src/opik/integrations/**/*.ts
description: Guidance for Opik TypeScript integrations (OpenAI, LangChain, Vercel)
alwaysApply: false
---

## Integrations

Locations
- OpenAI: [integrations/opik-openai/src](mdc:sdks/typescript/src/opik/integrations/opik-openai/src/index.ts)
- LangChain: [integrations/opik-langchain/src](mdc:sdks/typescript/src/opik/integrations/opik-langchain/src/index.ts)
- Vercel exporter: [integrations/vercel](mdc:sdks/typescript/src/opik/integrations/vercel/index.ts)

Design rules
- Default to non-blocking behavior; rely on batching; call `flush()` only when host lifecycle demands it (e.g., serverless finalize)
- Capture inputs/outputs and timings consistently; prefer provider-specific parsers/utilities in `utils.ts`/`parsers.ts`
- Keep modules self-contained; avoid tight coupling to SDK internals

Telemetry mapping
- Use `track`/`trackOpikClient` for contextual spans where possible
- Set `projectName` consistently from client or invocation options

Error handling
- Propagate provider errors; record failure spans with reasons (avoid sensitive data)
- Do not swallow `OpikApiError`; surface actionable errors to callers

Testing
- Mock provider clients; assert spans/inputs/outputs are recorded
- Use `flush()` to ensure batches are sent before assertions
- Validate error propagation and partial-failure behavior

