---
description: Documentation standards and code style for Opik Optimizer SDK
globs: sdks/opik_optimizer/src/opik_optimizer/**/*
alwaysApply: false
---
# Opik Optimizer Documentation Style

Clear documentation helps users understand how to configure and run optimizers. Keep public APIs self-explanatory and align written guides with the code.

## Docstrings and Type Hints

- Provide docstrings for public classes, lifecycle hooks (`optimize_prompt`, `_initialize_population`, `_evaluate_prompt`), and complex helpers. Start with a one-line summary followed by behaviour/side-effect details.
- Rely on type hints to document parameters; docstrings should explain semantics, expected ranges, and side effects (for example, background evaluations or Opik trace tagging).
- Use `pydantic` model field descriptions when exposing configuration objects to users.

## Examples and Guides

- Update `README.md`, notebooks under `notebooks/`, and docs under `docs/` whenever you add a new optimizer or surface area. Demonstrate minimal reproducible examples using datasets from `opik_optimizer.datasets`. Additionally the fern documentation in `apps/opik-documentation/documentation/fern/docs/agent_optimization` may need to be updated.
- Keep code snippets executable: import from `opik_optimizer`, configure provider keys via environment variables, and run on small datasets to limit cost.
- When features depend on optional extras, show the installation command (`pip install opik-optimizer[dev]`) alongside the example.

## Rich Output and CLI Messaging

- `OptimizationResult.__str__` and `reporting_utils` rely on Rich. When adding new console sections, use Rich markup strings and keep plain-text fallbacks sensible noting that some users may run the package in Juypter notebooks.
- Avoid direct `print` statements in optimizers; emit structured data through reporting helpers or logging.

## Release Notes

- Mention new configuration flags, dependency changes, and required environment variables in release notes or changelog entries.
- Cross-link to relevant docs or notebooks so users can follow up with detailed examples.

## API Spec

- Run `scripts/generate_fern_docs.py` to update API spec documentation within fern. If a class/object changes we need to insure imports are updated so we can build docs.