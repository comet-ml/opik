{"id": "br-001", "user_query": "Use the browser tool to open the Docling example and explain how to validate and load the extracted data.", "expected_tool": "browser_navigate", "arguments": {"url": "https://docling-project.github.io/docling/examples/extraction/#validating-and-loading-the-extracted-data"}, "reference_answer": "Docling writes the extracted tables to disk and shows how to run the validator before loading them. Use `docling validate` to check the JSON output, then load the validated result into a dataframe with the provided helper so you can inspect the rows in Python."}
{"id": "br-002", "user_query": "How does Agno persist agent state? Use the docs to summarise the storage options.", "expected_tool": "browser_navigate", "arguments": {"url": "https://docs.agno.com/concepts/agents/storage"}, "reference_answer": "Agno agents can store state in Redis, Postgres, or any custom storage provider. The doc explains that you configure storage in the agent definition so conversations, memories, and tool traces are written through the storage adapter."}
{"id": "br-003", "user_query": "Open the Agno metrics documentation and describe how to pull metrics for an agent.", "expected_tool": "browser_navigate", "arguments": {"url": "https://docs.agno.com/concepts/agents/metrics"}, "reference_answer": "The metrics page shows that agents export events to the analytics API. You can query the `/metrics` endpoint with the agent ID to retrieve usage, latency, and success counts for that agent."}
