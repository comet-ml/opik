---
description: Key library design & architecture concepts
globs:
alwaysApply: true
---
- `opik.Opik` is the main API class, use it to create other API objects (e.g. `create_experiment`) and provide some higher level API which wraps complicated REST calls (e.g. `search_spans`)
- Create spans, traces and feedback scores is non-blocking operation that should be performed in the background.
- Follow layered architecture: API Objects → Message Processing (for non-blocking operations) → REST API → Backend
- Use `opik.opik_context` module, `opik.context_storage` module, and `@opik.track` decorator to handle spans and traces lifecycle.
- Extend base decorator classes for new tracking integrations (example: `opik.integrations.anthropic`), if the library
to integrate with supports callbacks, consider implementing a callback first (example: `opik.integrations.langchain`)
- Implement evaluation functionalities (new metrics and evaluate-like functions) in a way consistent with existing logic and API.
