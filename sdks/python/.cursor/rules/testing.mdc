---
description: Guidelines for adding new tests
globs:
alwaysApply: true
---
- Always add tests for a new feature.
- Be mindful regarding the path to the new test, it should follow the same principles as for other tests.
- e2e tests modules split by features
- library integration namespaces split by integrations
- unit tests partially replicate the structure of the opik package in order to find the tests for modules easily
- Organize tests by type: unit tests, library integration tests, end-to-end and library-end-to-end tests
- Use testlib when possible (`tests/testlib`).
- Use `fake_backend` fixture to emulate real backend when testing creation of spans, traces and feedback
scores in unit tests and library integration tests. Use TraceModel, SpanModel, FeedbackScoreModel and assertion helper functions. Extensive examples can be found in `tests/unit/decorator/test_tracker_outputs.py` and `tests/library_integration/openai/test_openai_responses.py`
- Use parameterized tests for testing multiple scenarios efficiently
- Test both sync and async code paths where applicable
- Use appropriate test fixtures for isolation
- Test error conditions and edge cases thoroughly
- Use domain-specific assertion helpers
- Almost always the test name convention is `test_WHAT__CASE_DESCRIPTION__EXPECTED_RESULT` or `test_WHAT__happyflow`.
- Make tests run as fast as possible
- Before adding a new test, study the existing similar tests nearby and try to make the new one consistent with old ones.
- End-to-end (e2e) tests should not test client-side logic branching, unless it leads to different endpoints used.
- `unittest.mock` or stub/fake objects can be used if needed.
- `pytest` is used for testing
- Make tests easy to read and understand
- Integrations that log traces, spans or feedback scores via the `opik.Opik` instance must be tested via library_integration tests that use `fake_backend` fixture
- Always test public API only, never violate privacy. If the test is very hard to make without reading some protected attribute - you can make a read-only property for it.