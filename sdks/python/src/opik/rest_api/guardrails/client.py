# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.guardrail import Guardrail
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GuardrailsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_guardrails(
        self,
        *,
        guardrails: typing.Sequence[Guardrail],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Batch guardrails for traces

        Parameters
        ----------
        guardrails : typing.Sequence[Guardrail]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from Opik import Guardrail, OpikApi

        client = OpikApi(
            api_key="YOUR_API_KEY",
            workspace_name="YOUR_WORKSPACE_NAME",
        )
        client.guardrails.create_guardrails(
            guardrails=[
                Guardrail(
                    entity_id="entity_id",
                    secondary_id="secondary_id",
                    name="TOPIC",
                    result="passed",
                    config={"key": "value"},
                    details={"key": "value"},
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/private/guardrails",
            method="POST",
            json={
                "guardrails": convert_and_respect_annotation_metadata(
                    object_=guardrails,
                    annotation=typing.Sequence[Guardrail],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGuardrailsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_guardrails(
        self,
        *,
        guardrails: typing.Sequence[Guardrail],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Batch guardrails for traces

        Parameters
        ----------
        guardrails : typing.Sequence[Guardrail]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from Opik import AsyncOpikApi, Guardrail

        client = AsyncOpikApi(
            api_key="YOUR_API_KEY",
            workspace_name="YOUR_WORKSPACE_NAME",
        )


        async def main() -> None:
            await client.guardrails.create_guardrails(
                guardrails=[
                    Guardrail(
                        entity_id="entity_id",
                        secondary_id="secondary_id",
                        name="TOPIC",
                        result="passed",
                        config={"key": "value"},
                        details={"key": "value"},
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/private/guardrails",
            method="POST",
            json={
                "guardrails": convert_and_respect_annotation_metadata(
                    object_=guardrails,
                    annotation=typing.Sequence[Guardrail],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
