# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.bi_information_response import BiInformationResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.trace_count_response import TraceCountResponse
from ..core.client_wrapper import AsyncClientWrapper


class SystemUsageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_dataset_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get datasets information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Datasets BiInformationResponse resource

        Examples
        --------
        from Opik import OpikApi

        client = OpikApi()
        client.system_usage.get_dataset_bi_info()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-datasets",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_experiment_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get experiments information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Experiments BiInformationResponse resource

        Examples
        --------
        from Opik import OpikApi

        client = OpikApi()
        client.system_usage.get_experiment_bi_info()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-experiments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_traces_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get traces information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Traces BiInformationResponse resource

        Examples
        --------
        from Opik import OpikApi

        client = OpikApi()
        client.system_usage.get_traces_bi_info()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-traces",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_traces_count_for_workspaces(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TraceCountResponse:
        """
        Get traces count on previous day for all available workspaces

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TraceCountResponse
            TraceCountResponse resource

        Examples
        --------
        from Opik import OpikApi

        client = OpikApi()
        client.system_usage.get_traces_count_for_workspaces()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/internal/usage/workspace-trace-counts",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TraceCountResponse,
                    parse_obj_as(
                        type_=TraceCountResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSystemUsageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_dataset_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get datasets information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Datasets BiInformationResponse resource

        Examples
        --------
        import asyncio

        from Opik import AsyncOpikApi

        client = AsyncOpikApi()


        async def main() -> None:
            await client.system_usage.get_dataset_bi_info()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-datasets",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_experiment_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get experiments information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Experiments BiInformationResponse resource

        Examples
        --------
        import asyncio

        from Opik import AsyncOpikApi

        client = AsyncOpikApi()


        async def main() -> None:
            await client.system_usage.get_experiment_bi_info()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-experiments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_traces_bi_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BiInformationResponse:
        """
        Get traces information for BI events per user per workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BiInformationResponse
            Traces BiInformationResponse resource

        Examples
        --------
        import asyncio

        from Opik import AsyncOpikApi

        client = AsyncOpikApi()


        async def main() -> None:
            await client.system_usage.get_traces_bi_info()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/internal/usage/bi-traces",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BiInformationResponse,
                    parse_obj_as(
                        type_=BiInformationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_traces_count_for_workspaces(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TraceCountResponse:
        """
        Get traces count on previous day for all available workspaces

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TraceCountResponse
            TraceCountResponse resource

        Examples
        --------
        import asyncio

        from Opik import AsyncOpikApi

        client = AsyncOpikApi()


        async def main() -> None:
            await client.system_usage.get_traces_count_for_workspaces()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/internal/usage/workspace-trace-counts",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TraceCountResponse,
                    parse_obj_as(
                        type_=TraceCountResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
