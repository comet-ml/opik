from typing import Dict, Any, Optional

import pydantic

from opik.llm_usage import base_original_provider_usage


class LangChainUsage(base_original_provider_usage.BaseOriginalProviderUsage):
    input_tokens: int
    """Number of tokens in the prompt."""

    output_tokens: int
    """Number of tokens in the response(s)."""

    total_tokens: int
    """Total token count for prompt, response candidates, and reasoning."""

    input_token_details: Optional["InputTokenDetails"]
    """Breakdown of tokens used in the prompt."""

    output_token_details: Optional["OutputTokenDetails"]
    """Breakdown of tokens used in a response."""

    def to_backend_compatible_flat_dict(self, parent_key_prefix: str) -> Dict[str, int]:
        result = {**self.__dict__}

        if self.input_token_details is not None:
            result["input_token_details"] = self.input_token_details.model_dump()

        if self.output_token_details is not None:
            result["output_token_details"] = self.output_token_details.model_dump()

        return self.flatten_result_and_add_model_extra(
            result=result, parent_key_prefix=parent_key_prefix
        )

    @classmethod
    def from_original_usage_dict(cls, usage: Dict[str, Any]) -> "LangChainUsage":
        usage_dict = {**usage}
        input_token_details_raw = usage_dict.pop("input_token_details", None)
        output_token_details_raw = usage_dict.pop("output_token_details", None)

        input_token_details = (
            InputTokenDetails(**input_token_details_raw)
            if isinstance(input_token_details_raw, dict)
            else None
        )

        output_token_details = (
            OutputTokenDetails(**output_token_details_raw)
            if isinstance(output_token_details_raw, dict)
            else None
        )

        return cls(
            **usage_dict,
            input_token_details=input_token_details,
            output_token_details=output_token_details,
        )


class InputTokenDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(extra="allow")

    cache_read: int
    """Number of tokens read from the cache."""


class OutputTokenDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(extra="allow")

    reasoning: int
    """Number of tokens generated by the model for reasoning."""
