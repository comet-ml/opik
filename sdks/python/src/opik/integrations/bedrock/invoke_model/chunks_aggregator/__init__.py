"""
THIS PACKAGE IS GENERATED BY CURSOR!

Bedrock invoke_model_with_response_stream chunk aggregator.

This package provides a modular, extensible architecture for aggregating
streaming chunks from different Bedrock model formats (Claude, Nova, etc.).

Each format aggregator returns the response in its native structure,
with usage standardized to Bedrock format (camelCase: inputTokens, outputTokens, totalTokens).

## Architecture

- `base`: Base types and protocols
- `claude`: Claude/Anthropic format aggregator
- `deepseek`: DeepSeek format aggregator
- `llama`: Meta Llama format aggregator
- `mistral`: Mistral/Pixtral format aggregator
- `nova`: Amazon Nova format aggregator
- `format_detector`: Format detection and aggregator registry

## Adding New Formats

To add support for a new model format:

1. Create a new aggregator module (e.g., `titan.py`):
   ```python
   class TitanAggregator:
       def aggregate(self, items) -> Dict[str, Any]:
           # Return Titan's native structure with Bedrock usage
           return {
               "outputText": "...",
               "usage": {"inputTokens": 10, "outputTokens": 20, "totalTokens": 30}
           }
   ```

2. Add detection and registration in `format_detector.py`:
   ```python
   from . import titan

   def _is_titan_format(chunk_data):
       return "titan_specific_field" in chunk_data

   # Add to _DETECTORS registry
   _DETECTORS["titan"] = _is_titan_format

   # Add to _AGGREGATORS registry
   _AGGREGATORS["titan"] = titan.TitanAggregator()
   ```

The new format will be automatically detected and used.
"""

from typing import Any, Dict, List

from . import format_detector

__all__ = [
    "aggregate_invoke_model_with_response_stream_chunks",
]


def aggregate_invoke_model_with_response_stream_chunks(
    items: List[Dict[str, Any]],
) -> Dict[str, Any]:
    """
    Aggregate streaming chunks from Bedrock invoke_model_with_response_stream.

    Automatically detects and handles different model formats (Claude, Nova, etc.).
    Each format returns its native response structure with Bedrock-standardized usage.

    Args:
        items: List of chunk items from the event stream

    Returns:
        Response dictionary in the format native to the detected provider,
        with usage in Bedrock format (inputTokens, outputTokens, totalTokens)

    Example:
        >>> response = client.invoke_model_with_response_stream(...)
        >>> chunks = list(response['body'])
        >>> result = aggregate_invoke_model_with_response_stream_chunks(chunks)
        >>> # For Claude: result['content'][0]['text']
        >>> # For Nova: result['output']['message']['content'][0]['text']
    """
    # Detect format and get appropriate aggregator
    format_name = format_detector.detect_format(items)
    aggregator = format_detector.get_aggregator(format_name)

    # Return provider-native structure with Bedrock usage
    return aggregator.aggregate(items)
