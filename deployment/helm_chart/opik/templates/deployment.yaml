{{- range $key, $value := .Values.component }}
{{- if $value.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opik.name" $ }}-{{ $key | lower }}
  labels:
    {{- include "opik.labels" $  | nindent 4 }}
    component: {{ include "opik.name" $ }}-{{ $key | lower }}
    {{- with $.Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with $value.annotations }}
  annotations: {{ . | toYaml | nindent 4 }}
  {{- end }}
spec:
  {{- if not $value.autoscaling.enabled }}
  replicas: {{ $value.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "opik.labels" $  | nindent 6 }}
      component: {{ include "opik.name" $ }}-{{ $key | lower }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "opik.labels" $  | nindent 8 }}
        component: {{ include "opik.name" $ }}-{{ $key | lower }}
        {{- with $.Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if $value.serviceAccount.enabled }}
      serviceAccountName: {{ $value.serviceAccount.name | quote }}
      {{- end }}
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $value.initContainers $value.waitForClickhouse $value.run_migration }}
      initContainers:
      {{- if and (eq $key "backend") $value.waitForClickhouse }}
        - name: wait-for-clickhouse-service
          image: "{{ default $.Values.registry $value.waitForClickhouse.image.registry }}/{{ $value.waitForClickhouse.image.repository }}:{{ $value.waitForClickhouse.image.tag }}"
          imagePullPolicy: {{ default $value.image.pullPolicy $value.waitForClickhouse.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              while [ $(curl -ksw "%{http_code}" "{{ $value.waitForClickhouse.clickhouse.protocol }}://{{ $value.waitForClickhouse.clickhouse.host }}:{{ $value.waitForClickhouse.clickhouse.port }}" -o /dev/null) -ne 200 ];
              do
                sleep 5;
                echo "Clickhouse is not available. Waiting for the Clickhouse...";
              done
      {{- end }}
      {{- if and (eq $key "backend") $value.run_migration }}
        - name: backend-migrations
          image: "{{ $.Values.registry }}/{{ $value.image.repository }}:{{ $value.image.tag }}"
          imagePullPolicy: {{ $value.image.pullPolicy }}
          command: ["./run_db_migrations.sh"]
          {{- with $value.envFrom }}
          envFrom:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with $value.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- end}}
      {{- with $value.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}

      containers:
        {{- with $value.additionalContainers }}
          {{- toYaml . | nindent 8 }}
        {{- end }}

        - name: {{ include "opik.name" $ }}-{{ $key | lower }}
          securityContext:
            {{- toYaml $value.securityContext | nindent 12 }}
          image: "{{ $.Values.registry }}/{{ $value.image.repository }}:{{ $value.image.tag }}"
          imagePullPolicy: {{ $value.image.pullPolicy }}
          {{- with $value.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $value.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ $value.livenessProbe.path }}
              port: {{ $value.livenessProbe.port }}
              httpHeaders:
                - name: Accept
                  value: application/json
            timeoutSeconds: 2
            periodSeconds: 10
            initialDelaySeconds: 0
            successThreshold: 1
            failureThreshold: 2
          {{- end }}
          {{- if $value.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ $value.readinessProbe.path }}
              port: {{ $value.readinessProbe.port }}
              httpHeaders:
                  - name: Accept
                    value: application/json
            timeoutSeconds: 2
            periodSeconds: 10
            initialDelaySeconds: {{ $value.readinessProbe.initialDelaySeconds }}
            successThreshold: 1
            failureThreshold: 2
          {{- end }}
          {{- with $value.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $value.envFrom }}
          envFrom:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with $value.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $value.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      {{- with $value.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $value.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $value.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with $value.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
