---
description: Frontend technology stack and project structure guidelines
globs: "**/*"
alwaysApply: false
---

# Frontend Technology Stack & Architecture

## Core Technologies
- **React 18** with **TypeScript**
- **Vite** as build tool and dev server
- **TanStack Router** for routing
- **TanStack Query** for data fetching and caching
- **Zustand** for state management
- **React Hook Form** with **Zod** for form validation
- **shadcn/ui** + **Radix UI** for UI components
- **Tailwind CSS** for styling with custom design system
- **CodeMirror 6** for code editing/viewing
- **Recharts** for data visualization
- **Lodash** for utility functions

## Project Structure
```
src/
├── api/                    # API layer with React Query hooks
├── components/
│   ├── ui/                # shadcn/ui base components
│   ├── shared/            # Reusable business components
│   ├── layout/            # Layout components
│   ├── pages/             # Page-specific components
│   └── pages-shared/      # Cross-page shared components
├── hooks/                 # Custom React hooks
├── lib/                   # Utility functions and helpers
├── store/                 # Zustand stores
├── types/                 # TypeScript type definitions
├── constants/             # Application constants
└── icons/                 # SVG icons
```

## Component Structure Pattern
```typescript
// Standard component structure
import React, { useMemo, useCallback } from "react";
import { cn } from "@/lib/utils";

type ComponentProps = {
  // Props interface
};

const Component: React.FunctionComponent<ComponentProps> = ({
  prop1,
  prop2,
  ...props
}) => {
  // 1. State hooks
  // 2. useMemo for expensive computations (only when needed)
  // 3. useCallback for event handlers (only when passed to children)
  // 4. Other hooks
  
  return (
    <div className="component-container">
      {/* JSX */}
    </div>
  );
};

export default Component;
```