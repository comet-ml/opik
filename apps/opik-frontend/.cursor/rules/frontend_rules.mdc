---
description: Main frontend development guidelines - references detailed rules
globs: "**/*"
alwaysApply: true
---

# Frontend Development Guidelines

This is the main frontend development guide. For detailed guidelines, refer to the specific rule files:

## Available Detailed Rules

1. **[Tech Stack](mdc:.cursor/rules/tech-stack.mdc)** - Technology stack and project structure
2. **[Performance](mdc:.cursor/rules/performance.mdc)** - Performance optimization with selective hook usage
3. **[UI Components](mdc:.cursor/rules/ui-components.mdc)** - UI component patterns and design system
4. **[API & Data Fetching](mdc:.cursor/rules/api-data-fetching.mdc)** - React Query patterns and data handling
5. **[State Management](mdc:.cursor/rules/state-management.mdc)** - Zustand stores and local storage
6. **[Forms](mdc:.cursor/rules/forms.mdc)** - React Hook Form and Zod validation patterns
7. **[Code Quality](mdc:.cursor/rules/code-quality.mdc)** - TypeScript patterns and naming conventions
8. **[Accessibility & Testing](mdc:.cursor/rules/accessibility-testing.mdc)** - Accessibility and testing guidelines
9. **[Unit Testing](mdc:.cursor/rules/unit-testing.mdc)** - Unit testing patterns for complex cases

## Quick Reference

### Performance Rules (Updated)
- **Use `useMemo` ONLY for**: Complex computations, large data transformations, expensive operations
- **Use `useCallback` ONLY for**: Functions passed to children, functions in useEffect deps, complex event handlers
- **Avoid**: Memoizing simple values, primitive operations, or functions only used locally

### Component Structure
```typescript
const Component: React.FunctionComponent<Props> = ({ ...props }) => {
  // 1. State hooks
  // 2. Queries/mutations  
  // 3. Selective memoization (only when needed)
  // 4. Event handlers (memoize only if passed to children)
  
  return <div>{/* JSX */}</div>;
};
```

### Key Technologies
- **React 18** + **TypeScript**
- **TanStack Router** + **TanStack Query**
- **Zustand** for state management
- **shadcn/ui** + **Tailwind CSS**
- **React Hook Form** + **Zod**
- **Vitest** for unit testing

### Import Order
1. React and external libraries
2. UI components (grouped)
3. Shared components
4. Hooks and utilities
5. Types and constants

### Unit Testing Guidelines
- **Always test**: Complex utility functions, data processing logic, filter/search logic
- **Consider testing**: Custom hooks with complex state, components with significant conditional rendering
- **Don't test**: Simple UI components without logic, third-party library integrations

When building components, always follow the established patterns and refer to the detailed rules for comprehensive guidelines.