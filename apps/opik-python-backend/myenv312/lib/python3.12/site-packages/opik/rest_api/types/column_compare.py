# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .column_compare_types_item import ColumnCompareTypesItem
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ColumnCompare(UniversalBaseModel):
    name: typing.Optional[str] = None
    types: typing.Optional[typing.List[ColumnCompareTypesItem]] = None
    filter_field_prefix: typing.Optional[str] = None
    filter_field: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="filterField")
    ] = pydantic.Field(default=None)
    """
    The field to use for filtering
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
