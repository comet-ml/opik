---
description: Tech Stack
globs:
alwaysApply: true
---
# Opik Java Backend Technology Stack

This document outlines the complete technology stack, dependency versions, and best practices for dependency management in the Opik Java backend.

## ⚠️ Critical Dependency Guidelines

### **Do Not Add Java Dependencies Lightly!**

- **Always prefer to use existing dependencies** before adding new ones
- **Evaluate necessity** - only add dependencies that provide significant value
- **Consider maintenance burden** - each dependency requires updates and security patches
- **Check for alternatives** within the existing stack before introducing new libraries
- **Review with team** before adding major dependencies

### **Dependency Addition Checklist**

Before adding a new dependency, ensure:

- [ ] No existing dependency can provide the same functionality
- [ ] The dependency is actively maintained and secure
- [ ] The dependency has acceptable licensing terms
- [ ] The dependency doesn't conflict with existing versions
- [ ] The dependency is necessary for the specific use case
- [ ] Team review has been completed

## Core Technology Stack

### **Backend (Java)**
- **Language**: Java 21
- **Framework**: Dropwizard 4.0.14 (REST API)
- **Dependency Injection**: Dropwizard-Guicey 7.2.1
- **Database Access**: JDBI3 with TransactionTemplate
- **Databases**: 
  - MySQL 9.2.0 (Connector/J)
  - ClickHouse 0.9.0 (Java Driver)
- **Migrations**: Liquibase with ClickHouse support (0.7.2)
- **Caching**: Redisson 3.50.0 (Redis)
- **Observability**: OpenTelemetry 2.18.0
- **Build Tool**: Maven with Spotless 2.46.0
- **Code Generation**: Lombok, MapStruct, Jackson
- **Cloud Services**: AWS Java SDK
- **Templating**: Mustache.java

## Key Dependencies by Category

### **Database & Persistence**
```xml
<!-- MySQL -->
<mysql.version>9.2.0</mysql.version>
<clickhouse-java.version>0.9.0</clickhouse-java.version>
<liquibase-clickhouse.version>0.7.2</liquibase-clickhouse.version>
```

### **API & Web Framework**
```xml
<!-- Dropwizard Ecosystem -->
<dropwizard.version>4.0.14</dropwizard.version>
<dropwizard-guicey.version>7.2.1</dropwizard-guicey.version>
<swagger.version>2.2.33</swagger.version>
```

### **Code Generation & Utilities**
```xml
<!-- Lombok, MapStruct, Jackson -->
<lombok.version>1.18.30</lombok.version>
<mapstruct.version>1.5.5.Final</mapstruct.version>
<jackson.version>2.16.1</jackson.version>
```

### **Cloud & External Services**
```xml
<!-- AWS Java SDK -->
<aws-java-sdk.version>1.12.261</aws-java-sdk.version>
```

### **Templating**
```xml
<!-- Mustache.java -->
<mustache.version>0.9.10</mustache.version>
```

### **AI/ML Libraries**
```xml
<!-- LangChain4j Integration -->
<langchain4j.version>1.1.0</langchain4j.version>
<langchain4j-open-ai.version>1.1.0</langchain4j-open-ai.version>
<langchain4j-anthropic.version>1.1.0</langchain4j-anthropic.version>
<langchain4j-google-ai-gemini.version>1.1.0</langchain4j-google-ai-gemini.version>
```

### **Observability & Monitoring**
```xml
<!-- OpenTelemetry Java -->
<opentelemetry.version>2.18.0</opentelemetry.version>
```

### **Testing Framework**
```xml
<!-- Java Testing -->
<testcontainers.version>1.21.0</testcontainers.version>
<wiremock.version>3.13.0</wiremock.version>
```

### **Build Plugins**
```xml
<!-- Maven Build Plugins -->
<maven-surefire-plugin.version>3.2.5</maven-surefire-plugin.version>
<maven-javadoc-plugin.version>3.6.3</maven-javadoc-plugin.version>
<maven-source-plugin.version>3.3.0</maven-source-plugin.version>
```

## Version Management Best Practices

### **1. Dependency Version Strategy**

#### **Java (Maven)**
- **Use BOMs**: Leverage dependency management through BOMs for consistent versions
- **Property Management**: Define versions in properties section for easy updates
- **Avoid Version Conflicts**: Use dependency management to resolve transitive dependencies

```xml
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-dependencies</artifactId>
            <version>${dropwizard.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

### **2. Security & Stability Guidelines**

#### **Critical Dependencies**
- **Database Drivers**: Keep MySQL and ClickHouse drivers updated for security patches
- **HTTP Clients**: Maintain current versions of HTTP client libraries
- **Validation Libraries**: Keep Jakarta Validation updated
- **Authentication**: Regular updates for security-related libraries

#### **Version Pinning Strategy**
- **Production Dependencies**: Pin major versions for stability
- **Development Dependencies**: Allow minor updates for new features
- **Security Updates**: Automate security patch updates via Dependabot

### **3. Compatibility Matrix**

#### **Java Compatibility**
- **Java 21**: All Java applications require Java 21
- **Dropwizard 4.x**: Compatible with Jakarta EE 10
- **JDBI3**: Works with Java 21 and modern database drivers

### **4. Update Strategy**

#### **Automated Updates**
- **Dependabot**: Configured for automated dependency updates
- **Security Patches**: Automatic security updates for critical dependencies
- **Version Bumps**: Regular minor version updates for non-breaking changes

#### **Manual Updates**
- **Major Versions**: Manual review required for major version updates
- **Breaking Changes**: Test thoroughly before upgrading major versions
- **Migration Guides**: Document breaking changes and migration steps

### **5. Testing & Validation**

#### **Dependency Testing**
- **Integration Tests**: Test all dependency combinations
- **Version Compatibility**: Validate new versions work with existing code
- **Performance Impact**: Monitor performance impact of dependency updates

#### **Security Scanning**
- **Vulnerability Scanning**: Regular security scans of dependencies
- **License Compliance**: Ensure all dependencies have acceptable licenses
- **Supply Chain Security**: Monitor for supply chain attacks

## Best Practices Summary

1. **Use BOMs and dependency management** for consistent versioning
2. **Pin major versions** for production stability
3. **Allow minor updates** for security patches and bug fixes
4. **Test thoroughly** before major version upgrades
5. **Document breaking changes** and provide migration guides
6. **Automate security updates** while requiring manual review for major changes
7. **Monitor dependency health** and remove unused dependencies
8. **Use semantic versioning** consistently
9. **Maintain compatibility matrices** for supported versions
10. **Regular dependency audits** to identify security vulnerabilities

## Version Update Checklist

When updating dependencies:

- [ ] Check for breaking changes in release notes
- [ ] Run full test suite including integration tests
- [ ] Update documentation if APIs have changed
- [ ] Verify performance impact
- [ ] Test with Java 21
- [ ] Update version compatibility matrix
- [ ] Create migration guide if needed
- [ ] Update CI/CD pipelines if required

## Key References

- [Dropwizard Documentation](https://www.dropwizard.io/en/latest/)
- [JDBI3 Database Access](https://jdbi.org/)
- [OpenTelemetry Observability](https://opentelemetry.io/)
- [Maven Dependency Management](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)
