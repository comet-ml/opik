---
description: Database migration script guidelines for Opik backend
globs: **/migrations/*.sql
alwaysApply: true
---

# Database Migration Script Guidelines

Comprehensive guidelines for creating and maintaining database migration scripts in the Opik backend using Liquibase.

## Migration Script Structure

### **Required Metadata**

Every migration script must include:

```sql
--liquibase formatted sql
--changeset author:version_description
--comment: Brief description of the migration
```

**Example:**

```sql
--liquibase formatted sql
--changeset john.doe:000001_add_user_table:
--comment: Create users table with basic authentication fields
```

## Database-Specific Guidelines

### **MySQL Migrations**

**Location:** `apps/opik-backend/src/main/resources/liquibase/db-app-state/migrations/`

**Best Practices:**

1. **Naming Convention:**
   - Use descriptive names: `version_description.sql`
   - Example: `000001_add_user_authentication.sql`

2. **Index Guidelines:**
   - Add only relevant indexes that improve query performance
   - Explain the purpose in comments
   - Consider composite indexes for multi-column queries

```sql
--changeset author:000001_add_user_indexes
--comment: Add indexes for user authentication queries

-- Index for email lookups (frequent login queries)
CREATE INDEX idx_users_email ON users(email);

-- Composite index for name searches (admin user management)
CREATE INDEX idx_users_name_status ON users(first_name, last_name, status);
```

3. **Script Requirements:**

   - Always end with an empty line
   - Use consistent indentation (4 spaces)
   - Include rollback statements when possible

### **ClickHouse Migrations**

**Location:** `apps/opik-backend/src/main/resources/liquibase/db-app-analytics/migrations/`

**Best Practices:**

1. **Cluster Configuration:**
   - Always use `ON CLUSTER '{cluster}'` for distributed operations
   - Follow existing patterns in the codebase

```sql
--changeset author:000001_add_analytics_table
--comment: Create analytics events table for tracking

CREATE TABLE IF NOT EXISTS analytics_events ON CLUSTER '{cluster}' (
    id              FixedString(36),
    workspace_id    String,
    event_type      Enum8('unknown' = 0 , 'sometype' = 1, 'othertype' = 2),
    timestamp       DateTime64(9, 'UTC') DEFAULT now64(9),,
    user_id         String,
    data            String,
    created_at      DateTime64(9, 'UTC') DEFAULT now64(9),
    created_by      String DEFAULT 'admin',
    last_updated_at DateTime64(6, 'UTC') DEFAULT now64(6),
    last_updated_by String DEFAULT 'admin'
ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/{shard}/${ANALYTICS_DB_DATABASE_NAME}/analytics_events', '{replica}', last_updated_at)
ORDER BY (workspace_id, event_type, id);
```

2. **Index Guidelines:**

   - Add only relevant indexes for ClickHouse query patterns
   - Explain the purpose in comments
   - Consider materialized views for complex aggregations

```sql
--changeset author:000001_add_analytics_table_indexes
--comment: Add indexes for analytics query optimization

-- Index for time-based queries (most common analytics pattern)
ALTER TABLE analytics_events ON CLUSTER '{cluster}' 
ADD INDEX idx_timestamp timestamp TYPE minmax GRANULARITY 4;
```

3. **Script Requirements:**

   - Always end with an empty line
   - Use consistent indentation (4 spaces)
   - Include proper cluster configuration

## Common Migration Patterns

### **Table Creation**

```sql
--changeset author:000001_create-example-table
--comment: Create example table with proper constraints

CREATE TABLE example_table (
    id VARCHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Index for name lookups
CREATE INDEX idx_example_name ON example_table(name);
```

### **Data Migration**

```sql
--changeset author:000001_migrate-user-data
--comment: Migrate existing user data to new schema

-- Update existing records
UPDATE users SET status = 'ACTIVE' WHERE status IS NULL;

-- Insert default data
INSERT INTO user_roles (user_id, role_id) 
SELECT id, 'default-role-id' FROM users WHERE id NOT IN (SELECT user_id FROM user_roles);
```

### **Schema Alterations**

```sql
--changeset author:000001_add-user-phone
--comment: Add phone number field to users table

-- Add new column
ALTER TABLE users ADD COLUMN phone_number VARCHAR(20);

-- Add index for phone lookups
CREATE INDEX idx_users_phone ON users(phone_number);
```

## Quality Assurance

### **Pre-Migration Checklist**

- [ ] Script follows naming conventions
- [ ] Proper changeset metadata included
- [ ] Relevant indexes added with explanatory comments
- [ ] Empty line at end of script
- [ ] Rollback statements included where appropriate
- [ ] Script tested in development environment

### **Common Mistakes to Avoid**

1. **Missing Metadata:**

   ```sql
   -- ❌ Bad: Missing changeset
   CREATE TABLE users (id VARCHAR(36));
   
   -- ✅ Good: Proper changeset
   --changeset author:create-users:1.0.0
   CREATE TABLE users (id VARCHAR(36));
   ```

2. **Inconsistent Formatting:**

   ```sql
   -- ❌ Bad: No empty line at end
   CREATE INDEX idx_users_email ON users(email);
   
   -- ✅ Good: Empty line at end
   CREATE INDEX idx_users_email ON users(email);
   
   ```

3. **Unnecessary Indexes:**

   ```sql
   -- ❌ Bad: Index on rarely queried column
   CREATE INDEX idx_users_created_at ON users(created_at);
   
   -- ✅ Good: Index with explanation
   -- Index for user registration analytics (used in monthly reports)
   CREATE INDEX idx_users_created_at ON users(created_at);
   ```

## Testing Guidelines

### **Local Testing**

1. **Test in Development:**

   ```bash
   # Run migration locally
   mvn liquibase:update
   ```

2. **Verify Rollback:**

   ```bash
   # Test rollback functionality
   mvn liquibase:rollback
   ```

### **Integration Testing**

- Test migrations in staging environment
- Verify data integrity after migration
- Check performance impact of new indexes

## Key References

- [Liquibase Documentation](https://www.liquibase.org/documentation/)
- [MySQL Migration Best Practices](https://dev.mysql.com/doc/refman/8.0/en/)
- [ClickHouse Query Optimizations](https://clickhouse.com/blog/a-simple-guide-to-clickhouse-query-optimization-part-1)
- [Database Migration Patterns](https://martinfowler.com/articles/evodb.html)
