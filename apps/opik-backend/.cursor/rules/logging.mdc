---
description: Logging guidelines for Opik backend
globs: **/*.java
alwaysApply: true
---

# Logging Guidelines

Comprehensive guidelines for implementing proper logging in the Opik backend using SLF4J and Lombok.

## Core Principles

### **Structured Logging**

- Use consistent, structured logging throughout the application
- Use SLF4J for logging with the `@Slf4j` annotation
- Include relevant context without exposing sensitive information
- Use appropriate log levels for different types of messages

### **Log Level Guidelines**

```java
// ERROR - System errors, exceptions, critical failures
log.error("Database connection failed", exception);

// WARN - Business rule violations, recoverable issues
log.warn("User not found: '{}'", userId, exception);

// INFO - Important business events, successful operations
log.info("Successfully created user with id: '{}'", user.getId());

// DEBUG - Detailed debugging information
log.debug("Processing request for workspace: '{}'", workspaceId);
```

## Logging Implementation

### **Using SLF4J with Lombok**

```java
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class UserService {
    
    private final @NonNull UserDao userDao;
    private final @NonNull IdGenerator idGenerator;
    
    public UserResponse createUser(UserCreateRequest request) {
        log.info("Creating user for workspace: '{}'", request.getWorkspaceId());
        
        try {
            var user = userDao.create(buildUser(request));
            log.info("Successfully created user with id: '{}'", user.getId());
            return user;
            
        } catch (BadRequestException exception) {
            log.warn("Validation failed for user creation", exception);
            throw exception;
        } catch (SQLException exception) {
            log.error("Database error while creating user", exception);
            throw new InternalServerErrorException("Failed to create user", exception);
        }
    }
}
```

### **Context-Rich Logging**

```java
// Include relevant context in log messages (avoiding sensitive data)
log.error("Failed to create user for workspace: '{}'", 
    request.getWorkspaceId(), exception);

// Use structured logging for complex errors
log.error("Database transaction failed", Map.of(
    "operation", "create_user",
    "user_id", userId,
    "error_code", exception.getErrorCode(),
    "sql_state", exception.getSQLState()
), exception);
```

## Sensitive Data Guidelines

### **Never Log Sensitive Information**

**❌ Never log:**

- Email addresses, phone numbers, names
- Passwords, API keys, tokens
- Credit card numbers, SSNs
- Personal identifiers
- Database credentials
- Configuration secrets

**✅ Safe to log:**

- User IDs, workspace IDs
- Operation names, method names
- Error codes, status codes
- Timestamps, durations
- Non-sensitive metadata

### **Logging Format Conventions**

**Always surround logged values with single quotes:**

```java
// ✅ Good: Values surrounded with quotes
log.info("Successfully created user with id: '{}'", user.getId());
log.warn("User not found: '{}'", id, exception);
log.error("Failed to create user for workspace: '{}'", workspaceId, exception);

// ❌ Bad: Values not surrounded with quotes
log.info("Successfully created user with id: {}", user.getId());
log.warn("User not found: {}", id, exception);
log.error("Failed to create user for workspace: {}", workspaceId, exception);
```

## Performance Logging

### **Timing and Performance**

```java
@Slf4j
public class PerformanceService {
    
    public void processData(List<Data> dataList) {
        var startTime = System.currentTimeMillis();
        log.info("Starting data processing for '{}' items", dataList.size());
        
        try {
            // Process data
            var result = processItems(dataList);
            
            var duration = System.currentTimeMillis() - startTime;
            log.info("Data processing completed in '{}'ms", duration);
            
        } catch (Exception exception) {
            var duration = System.currentTimeMillis() - startTime;
            log.error("Data processing failed after '{}'ms", duration, exception);
            throw exception;
        }
    }
}
```

### **Database Query Logging**

```java
@Slf4j
public class DatabaseService {
    
    public List<User> findUsersByWorkspace(String workspaceId) {
        log.debug("Executing query for workspace: '{}'", workspaceId);
        
        try {
            var users = userDao.findByWorkspace(workspaceId);
            log.debug("Query returned '{}' users for workspace: '{}'", users.size(), workspaceId);
            return users;
            
        } catch (SQLException exception) {
            log.error("Database query failed for workspace: '{}'", workspaceId, exception);
            throw new InternalServerErrorException("Database query failed", exception);
        }
    }
}
```

## Error Logging

### **Exception Handling**

```java
@Slf4j
public class ErrorHandlingService {
    
    public void handleExternalServiceCall(String serviceName, String operation) {
        try {
            log.info("Calling external service: '{}' for operation: '{}'", serviceName, operation);
            
            var result = externalService.call(operation);
            log.info("External service call successful: '{}'", serviceName);
            
        } catch (HttpClientException exception) {
            log.error("External service call failed: '{}' - '{}'", serviceName, operation, exception);
            throw new InternalServerErrorException("External service unavailable", exception);
            
        } catch (TimeoutException exception) {
            log.warn("External service call timed out: '{}' - '{}'", serviceName, operation, exception);
            throw new InternalServerErrorException("External service timeout", exception);
        }
    }
}
```

## Logging Best Practices

### **Do's:**

- ✅ Use `@Slf4j` annotation for automatic logger injection
- ✅ Surround logged values with single quotes
- ✅ Include relevant context without sensitive data
- ✅ Use appropriate log levels
- ✅ Log exceptions as the last parameter
- ✅ Include timing information for performance-critical operations

### **Don'ts:**

- ❌ Log sensitive information (PII, credentials, etc.)
- ❌ Use `log.error()` without exception parameter
- ❌ Log without context or meaningful information
- ❌ Use inconsistent log levels
- ❌ Log in tight loops or performance-critical paths

## Logging Configuration

### **Application Logging**

```java
@Slf4j
public class ApplicationService {
    
    public void startApplication() {
        log.info("Starting Opik backend application");
        log.info("Environment: '{}'", environment);
        log.info("Version: '{}'", version);
    }
    
    public void shutdownApplication() {
        log.info("Shutting down Opik backend application");
        // Cleanup operations
        log.info("Application shutdown completed");
    }
}
```

### **Health Check Logging**

```java
@Slf4j
public class HealthCheckService {
    
    public HealthStatus checkDatabaseHealth() {
        log.debug("Performing database health check");
        
        try {
            var status = databaseHealthChecker.check();
            log.debug("Database health check result: '{}'", status);
            return status;
            
        } catch (Exception exception) {
            log.error("Database health check failed", exception);
            return HealthStatus.UNHEALTHY;
        }
    }
}
```

## Key References

- [SLF4J Documentation](http://www.slf4j.org/)
- [Lombok @Slf4j](https://projectlombok.org/features/log)
