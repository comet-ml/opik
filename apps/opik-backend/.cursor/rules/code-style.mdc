---
globs: **/*.java
---
# Backend Java Code Style Guidelines

## String Constants and Templates

### Define Reusable String Templates

**Rule**: When you have repeated string prefixes or patterns, define them as constants with string formatting templates.

### ❌ BAD: Hardcoded Repeated String Patterns

```java
private static final Map<AutomationRuleEvaluatorField, String> FIELD_MAP = new EnumMap<>(
    ImmutableMap.<AutomationRuleEvaluatorField, String>builder()
        .put(AutomationRuleEvaluatorField.ID, "rule." + ID_DB)
        .put(AutomationRuleEvaluatorField.NAME, "rule." + NAME_DB)
        .put(AutomationRuleEvaluatorField.TYPE, "evaluator." + TYPE_DB)
        .put(AutomationRuleEvaluatorField.ENABLED, "evaluator." + ENABLED_DB)
        .put(AutomationRuleEvaluatorField.PROJECT_ID, "evaluator." + PROJECT_ID_DB)
        .build());
```

### ✅ GOOD: String Template Constants

```java
// Define templates at the top of the class
private static final String RULE_PREFIX = "rule.%s";
private static final String EVALUATOR_PREFIX = "evaluator.%s";

private static final Map<AutomationRuleEvaluatorField, String> FIELD_MAP = new EnumMap<>(
    ImmutableMap.<AutomationRuleEvaluatorField, String>builder()
        .put(AutomationRuleEvaluatorField.ID, RULE_PREFIX.formatted(ID_DB))
        .put(AutomationRuleEvaluatorField.NAME, RULE_PREFIX.formatted(NAME_DB))
        .put(AutomationRuleEvaluatorField.TYPE, EVALUATOR_PREFIX.formatted(TYPE_DB))
        .put(AutomationRuleEvaluatorField.ENABLED, EVALUATOR_PREFIX.formatted(ENABLED_DB))
        .put(AutomationRuleEvaluatorField.PROJECT_ID, EVALUATOR_PREFIX.formatted(PROJECT_ID_DB))
        .build());
```

**Benefits**:
- Single source of truth for prefixes
- Easier to refactor if prefix changes
- More maintainable and readable
- Less error-prone when adding new mappings

## Import Organization

### Always Use Imports

**Rule**: Use proper imports instead of fully qualified class names in code.

### ❌ BAD: Fully Qualified Class Names

```java
public void method() {
    java.util.List<String> items = java.util.Arrays.asList("a", "b");
    java.util.stream.Stream<java.util.Map<String, Object>> stream = items.stream()
        .map(java.util.Collections::singletonMap);
}
```

### ✅ GOOD: Proper Imports

```java
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public void method() {
    List<String> items = Arrays.asList("a", "b");
    Stream<Map<String, Object>> stream = items.stream()
        .map(Collections::singletonMap);
}
```

**When to use fully qualified names**:
- Class name conflicts (e.g., `java.sql.Date` vs `java.util.Date`)
- One-time usage of obscure classes (judgment call)

## Constants Organization

### Group Related Constants

Organize constants by category with clear comments:

```java
public class FilterQueryBuilder {
    
    // Database column names - base fields
    private static final String ID_DB = "id";
    private static final String NAME_DB = "name";
    private static final String TYPE_DB = "type";
    
    // Database column names - timestamps
    private static final String CREATED_AT_DB = "created_at";
    private static final String LAST_UPDATED_AT_DB = "last_updated_at";
    
    // Database column names - audit fields
    private static final String CREATED_BY_DB = "created_by";
    private static final String LAST_UPDATED_BY_DB = "last_updated_by";
    
    // Table prefixes
    private static final String RULE_PREFIX = "rule.%s";
    private static final String EVALUATOR_PREFIX = "evaluator.%s";
    
    // Sensitive fields (DO NOT expose in API)
    // private static final String WEBHOOK_SECRET_TOKEN_DB = "webhook_secret_token"; // REMOVED
}
```

## Comment Hygiene

### Clean Up Unused Code

**Rule**: Remove commented-out constants and unused field declarations instead of leaving them in the codebase.

```java
// ❌ BAD: Leaving commented-out sensitive field
private static final String WEBHOOK_URL_DB = "webhook_url";
// private static final String WEBHOOK_SECRET_TOKEN_DB = "webhook_secret_token"; // Don't expose

// ✅ GOOD: Just remove it completely
private static final String WEBHOOK_URL_DB = "webhook_url";
// Webhook secret token is intentionally not included for security reasons
```

**When to keep comments**:
- Explaining WHY something was removed (in PR description)
- Documenting business decisions
- Clarifying non-obvious security constraints

## Method Parameter Formatting

### Consistent Parameter Alignment

For methods with multiple parameters, use consistent line breaks:

```java
// ✅ GOOD: Each parameter on its own line when breaking
public Response find(
        @QueryParam("project_id") UUID projectId,
        @QueryParam("id") 
        @Schema(description = "Filter by rule ID (partial match)") 
        String id,
        @QueryParam("filters") String filters,
        @QueryParam("sorting") String sorting,
        @QueryParam("page") @DefaultValue("1") int page,
        @QueryParam("size") @DefaultValue("10") int size) {
    // method body
}
```

## Enum and Map Initialization

### ImmutableMap Patterns

Use consistent formatting for map initialization:

```java
// ✅ GOOD: Consistent formatting with clear structure
private static final Map<Field, String> FIELD_MAP = new EnumMap<>(
    ImmutableMap.<Field, String>builder()
        .put(Field.ID, RULE_PREFIX.formatted(ID_DB))
        .put(Field.NAME, RULE_PREFIX.formatted(NAME_DB))
        .put(Field.TYPE, EVALUATOR_PREFIX.formatted(TYPE_DB))
        .build());
```

## Related Rules

- [Code Quality Guidelines](mdc:apps/opik-backend/.cursor/rules/code_quality.mdc)
- [General Guidelines](mdc:apps/opik-backend/.cursor/rules/general.mdc)
