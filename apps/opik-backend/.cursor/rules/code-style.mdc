---
description: Code Quality guidelines
globs: apps/opik-backend/**/*
alwaysApply: false
---
# Backend Java Code Style Guidelines

## Import Organization

### Always Use Imports

**Rule**: Use proper imports instead of fully qualified class names in code.

### ❌ BAD: Fully Qualified Class Names

```java
public void method() {
    java.util.List<String> items = java.util.Arrays.asList("a", "b");
    java.util.stream.Stream<java.util.Map<String, Object>> stream = items.stream()
        .map(java.util.Collections::singletonMap);
}
```

### ✅ GOOD: Proper Imports

```java
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public void method() {
    List<String> items = Arrays.asList("a", "b");
    Stream<Map<String, Object>> stream = items.stream()
        .map(Collections::singletonMap);
}
```

**When to use fully qualified names**:
- Class name conflicts (e.g., `java.sql.Date` vs `java.util.Date`)
- One-time usage of obscure classes (judgment call)

## Comment Hygiene

### Clean Up Unused Code

**Rule**: Remove commented-out constants and unused field declarations instead of leaving them in the codebase.

```java
// ❌ BAD: Leaving commented-out sensitive field
private static final String WEBHOOK_URL_DB = "webhook_url";
// private static final String WEBHOOK_SECRET_TOKEN_DB = "webhook_secret_token"; // Don't expose

// ✅ GOOD: Just remove it completely
private static final String WEBHOOK_URL_DB = "webhook_url";
// Webhook secret token is intentionally not included for security reasons
```

**When to keep comments**:
- Explaining WHY something was removed (in PR description)
- Documenting business decisions
- Clarifying non-obvious security constraints

## Method Parameter Formatting

### Consistent Parameter Alignment

For methods with multiple parameters, use consistent line breaks:

```java
// ✅ GOOD: Each parameter on its own line when breaking
public Response find(
        @QueryParam("project_id") UUID projectId,
        @QueryParam("id") 
        @Schema(description = "Filter by rule ID (partial match)") 
        String id,
        @QueryParam("filters") String filters,
        @QueryParam("sorting") String sorting,
        @QueryParam("page") @DefaultValue("1") int page,
        @QueryParam("size") @DefaultValue("10") int size) {
    // method body
}
```

## Enum and Map Initialization

### ImmutableMap Patterns

Use consistent formatting for map initialization:

```java
// ✅ GOOD: Consistent formatting with clear structure
private static final Map<Field, String> FIELD_MAP = new EnumMap<>(
    ImmutableMap.<Field, String>builder()
        .put(Field.ID, RULE_PREFIX.formatted(ID_DB))
        .put(Field.NAME, RULE_PREFIX.formatted(NAME_DB))
        .put(Field.TYPE, EVALUATOR_PREFIX.formatted(TYPE_DB))
        .build());
```

## Related Rules

- [Code Quality Guidelines](mdc:apps/opik-backend/.cursor/rules/code_quality.mdc)
- [General Guidelines](mdc:apps/opik-backend/.cursor/rules/general.mdc)
